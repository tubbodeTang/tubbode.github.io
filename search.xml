<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2019 年度总结</title>
      <link href="/posts/23468/"/>
      <url>/posts/23468/</url>
      
        <content type="html"><![CDATA[<p>今天的主题是聊聊我的 2019。</p><p>我习惯性在春节前后写写总结与展望，因为过年回家的假期是一个调整的阶段，在这之前，一整年的工作从没有中断过，而过年回来，也才是新的一年正式工作的开始。这样虽然赶不上网络上年终总结的热度，但是却更能让自己冷静思考，过年假期的时候好好调整一下。</p><p>2019 最深刻的事情，一个是考上了研究生，另一个是生病，各种往医院跑。之前的文章里，我也分享了一些相关经历。</p><p>上半年从调剂到最后录取，老实说，我周围可能都没几个人完整经历过，因为很多人到了调剂那步如果没有什么把握都是选择放弃的，我一开始也有这种想法。但是真的好在自己没放弃，也好在自己够幸运，一直遇到好心的人在帮助我。现在考研形势已经越来越激烈了，想想都有点后怕，如果自己还是没考上，是不是就到此为止了？</p><p>到下半年开学，一直比较忙，周内工作，周末上课，还得做作业，一些小项目之类的。认识了一些同学，了解了一些新的想法和思路，算是继续开阔了视野吧。不过学校的思维和工作的思维还是有一些断层的，东西学没学到手，能不能用起来，还是要看自己的沉淀和总结。</p><p>讲真我以前从不知道秋日以及冬日的北京，周末六点半长什么样子。现在我终于知道了，还挺美的。下图是 12 月 号，上课途中在城铁上拍的。还有清晨的梧桐树、凋落的爬山虎。</p><p><img src="http://image.tubbodetang.site/2019_3.jpg" style="zoom: 25%;"></p><p><img src="http://image.tubbodetang.site/2019_1.jpg" style="zoom:25%;"></p><p><img src="http://image.tubbodetang.site/2019_2.jpg" style="zoom:25%;"></p><p>考上研究生对我来说，是一个目标的完成，也是自己改变的一个见证，给了我很大的肯定。信心的价值甚至大于最终收获的知识或者是一纸学历，它告诉我坚持和努力真的是有意义的，虽然最后的选择权可能不在你，但至少，你能为自己赢得机会被别人看见。「但行好事，莫问前程」。如果真的用尽全力，也就自然不会有遗憾了。</p><p>第二件事就是生病的事情，从我有记忆以来，我好像还没有独自一个人生病这么久过。虽然不是很严重的病，但是它不只是一个生理上的考验，更多的是带给我了很多关于人生的思考，想了很多以前不会想的事情。</p><p>而且巧的是，我今年看的书也有很多是关于人生的意义的。可能自己的确也处在一个困惑的时期，困惑的年龄吧。不管最后能不能找到答案，或者找到的答案是什么，这段经历可能多少都会影响我的一些想法……</p><p>然后说说年初给自己订的小目标吧。完成情况如下：</p><table><thead><tr><th>目标</th><th>完成情况</th></tr></thead><tbody><tr><td>至少阅读 15 本书</td><td>超额完成</td></tr><tr><td>至少写 30 篇公众号文章</td><td>未能全部完成，算上这篇只发布了 17 篇</td></tr><tr><td>利用一切时间临摹 1 个完整的商业项目</td><td>未能全部完成，可以说完全没开始</td></tr><tr><td>看 5 本 UI 方面的书籍并做好笔记</td><td>未能全部完成，只看了 2 本</td></tr><tr><td>画画，至少完成 10 张习作</td><td>未能全部完成，可能只有 5 张草稿</td></tr><tr><td>练字，注重质量地写满 1 本练字本</td><td>未能全部完成，写了 1/4 吧</td></tr><tr><td>每天坚持做 1 组运动</td><td>后续未能坚持</td></tr></tbody></table><p>真是应了那句话，立 Flag 就是为了啪啪打脸。</p><p>不过总得来说我还是满意的，因为未来不可预知，订这些小目标的时候，我完全没想到自己会考上研究生，没想到自己一直不争气的生病，也没想到边工作边读研会是这么忙碌充实的一件事，以至于到今年最后一个季度，我只能咬着牙在坚持学习和工作，更别说兼顾其他的一些事了。</p><p>所以今年的目标，也会有一些相应的调整，至少是安排自己做一些更重要的事。</p><p>目标里最遗憾的其实是没有坚持锻炼。除了特别偶尔会去健走，我之前坚持的其他一些运动总是因为生病或者忙碌而中断。怪自己还是对自己太温柔，其实想想生病某种程度就是因为锻炼的还是太少，而生病又反过来让自己不能锻炼，真是讽刺。</p><p>最有成就感的就是看书这件事了，以前常常说要多读书，但只有今年真正的做到了。读书带给了我很多，真的是一种精神食粮。觉得困惑的时候就看看书，因为世界上很多事情不是什么新鲜事，看书也是一种扩充经历、吸取他人经验的过程。</p><p>2019 还和身边的朋友及广大网友一起见证了各种社会热点事件，作为一个底层人民，不得不感慨成年人的世界每天都挺难的，但好在都一起坚持过来了。再难日子还得接着过，为啥不好好过呢？</p><p>总之 2019 还是不错的，不管好与坏，都是值得纪念的一年。</p><p>————————————</p><p>2020，已经在路上了。</p><p>祝大家新年快乐，事事如意。</p><p>新的一年也一起共同进步。</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客阿里云同步部署更新</title>
      <link href="/posts/31145/"/>
      <url>/posts/31145/</url>
      
        <content type="html"><![CDATA[<p>之前的博客一直是同时挂在 GitHub Pages 服务和 Coding 的 Pages 服务上的。但是网站备案通过后我一直没时间管，有一天忽然通知我需要指向阿里云国内节点服务器才行，否则就按空壳网站取消备案，所以没办法，决定先把博客放上阿里云再说吧……</p><p>由于购买的是 Ubuntu 操作系统的，所以上来先是安装 nginx。</p><h4 id="nginx-的安装"><a href="#nginx-的安装" class="headerlink" title="nginx 的安装"></a>nginx 的安装</h4><p>切换到 root 用户</p><p>用 <code>apt-get install nginx</code> 命令来安装 nginx</p><p><img src="http://image.tubbodetang.site/hexo_aliyun_2.png" alt=""></p><p>如果出现以上错误，就按照指示 <code>apt-get update</code> 一下，然后重新执行安装命令即可。</p><p>安装成功之后我们可以 <code>$sudo /etc/init.d/nginx start</code> 启动一下 nginx 服务，看看安装效果，访问我们阿里云服务器的公网 ip ，可以看到如下页面</p><p><img src="http://image.tubbodetang.site/hexo_aliyun_3.png" alt=""></p><p>说明 nginx 服务已经运行起来了，接下来就是进一步的配置了。</p><h4 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h4><p>通过  <code>apt-get install git</code> 在 Ubuntu 上安装 Git。</p><p>安装成功后，同样通过 <code>git --version</code> 命令测试一下安装情况。出现版本号说明成功。</p><p><img src="http://image.tubbodetang.site/image-20200110141547355.png" alt=""></p><p>接下来做好用户名和邮箱的全局配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;your name&quot;</div><div class="line">git config --global user.email &quot;your email&quot;</div></pre></td></tr></table></figure><h4 id="博客的初步挂载"><a href="#博客的初步挂载" class="headerlink" title="博客的初步挂载"></a>博客的初步挂载</h4><p>进入 <code>/var/www/html</code> 目录中，这是 nginx 的默认目录。把之前放在 GitHub 的 Hexo 博客项目 clone 到 nginx 的默认目录下。然后修改一下 nginx 在 <code>/etc/nginx/sites-available/default</code> 文件中的默认配置，使路径指向我们的 clone 的博客项目。我的项目就叫 <code>tubbodeTang.github.io</code>，如下图：</p><p><img src="http://image.tubbodetang.site/image-20200110155617578.png" alt=""></p><p>这个时候再访问我们的公网 ip ，就不是 nginx 默认的欢迎页了，已经可以看到我们的静态博客了</p><h4 id="GitHub-与阿里云同步更新设置"><a href="#GitHub-与阿里云同步更新设置" class="headerlink" title="GitHub 与阿里云同步更新设置"></a>GitHub 与阿里云同步更新设置</h4><p>刚刚我们只是把静态博客展示了出来，博客的来源是从 GitHub 上 clone 下来的。这还不够，因为我们总不能每次更新了博客都上阿里云 clone 或者 pull 一下来让其保持与 GitHub 上存储的内容一致，那就太让人抓狂了。</p><p>我们需要的是每次 hexo d 发布博客的时候，阿里云上的内容都自动更新。</p><h5 id="阿里云-git-服务搭建"><a href="#阿里云-git-服务搭建" class="headerlink" title="阿里云 git 服务搭建"></a>阿里云 git 服务搭建</h5><p>在阿里云服务器添加一个 git 用户用来专门进行 git 操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adduser git</div></pre></td></tr></table></figure><p>然后在 <code>home/git/</code> 目录下创建一个裸仓。</p><p><img src="http://image.tubbodetang.site/hexo_aliyun_4.png" alt=""></p><p>因为后续的操作都是通过 git 用户，所以把这个裸仓的权限给到 git 用户。可以用 <code>chown</code> 命令的 <code>-v</code> 参数看到过程。裸仓下所有的文件权限都递归的给到了 git 用户。</p><p><img src="http://image.tubbodetang.site/image-20200110161942657.png" alt=""></p><p>在<strong>本地机器</strong>执行  <code>cat ~/.ssh/id_rsa.pub</code>  获取到本机的 SSH 公钥</p><p><img src="http://image.tubbodetang.site/image-20200110175830814.png" alt=""></p><p>然后进入阿里云服务器 git 用户的  ~/.ssh 目录，打开 authorize_keys 文件进行编辑。把本地机器的 SSH 公钥粘贴写入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd /home/git/</div><div class="line">$ mkdir .ssh</div><div class="line">$ cd .ssh</div><div class="line">$ vi authorized_keys</div></pre></td></tr></table></figure><p>注意我这里因为是裸机，服务器上面 <code>/home/git</code> 目录下应该没有 <code>.ssh</code> 目录，所以得自己创建（打开即自动创建）authorized_keys 之后，把刚才复制下来的公钥粘贴进去，就可以了，保存退出。</p><p>我们可以先测试一下本地对阿里云 git 服务的连接情况，试一下 clone 操作，这时可以把阿里云服务添加到known_host 中。成功克隆裸仓说明服务可以连接。</p><p><img src="http://image.tubbodetang.site/image-20200112142551399.png" alt=""></p><h5 id="使用-hooks-同步更新"><a href="#使用-hooks-同步更新" class="headerlink" title="使用 hooks 同步更新"></a>使用 hooks 同步更新</h5><p>为了能实现自动同步，我们需要用到 Git 的 hook 功能。让我们的裸仓接到本地的 push 之后，触发动作。</p><p>在 <code>/home/git/hexo/hooks/</code> 路径下新建一个 <code>post-receive</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim post-receive</div></pre></td></tr></table></figure><p>并写入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">git --work-tree=/var/www/html/tubbodeTang.github.io --git-dir=/home/git/hexo.git checkout -f</div></pre></td></tr></table></figure><p>这里的文件夹名字以自己的名字为准。就是之前我们在 nginx 默认路径下 clone 的那个。以上操作就是在接到 push 之后，把内容写入到 nginx 默认路径下。</p><p>最后的效果可以看到 hooks 路径下新生成了 post-receive 文件</p><p><img src="http://image.tubbodetang.site/image-20200110180338874.png" alt=""></p><p>之前赋予权限的时候还没创建这个文件，重新更改一下权限。</p><p><img src="http://image.tubbodetang.site/hexo_aliyun_1.png" alt=""></p><h5 id="为本地-Hexo-项目添加推送配置"><a href="#为本地-Hexo-项目添加推送配置" class="headerlink" title="为本地 Hexo 项目添加推送配置"></a>为本地 Hexo 项目添加推送配置</h5><p>最后的最后更新一下本地 hexo 的配置文件，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo: git@你的公网ip:/home/git/hexo.git,master</div></pre></td></tr></table></figure><p>如图：</p><p><img src="http://image.tubbodetang.site/hexo_aliyun_5.png" alt=""></p><p>这样 <code>hexo d</code> 的时候，就能同时推送到阿里云服务器，然后触发我们写好的 <code>post-receive</code> 钩子，去更新我们放在 nginx 默认路径下的静态博客站。</p><p>以上全部没问题之后， <code>hexo d</code> 更新发布一篇文章看看，刷新我们的公网页面，可以看到，已经同步发布了。</p><p>————————————</p><p>本文完。</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="http://iamwr.com/2018/12/20/hexo-from-github-2-aliyun/" target="_blank" rel="external">Hexo 从 GitHub 到阿里云</a></p><p><a href="https://imys.net/20160303/hexo-nginx-auto-deploy.html" target="_blank" rel="external">阿里云搭建Git服务，实现Hexo自动部署</a></p><p><a href="https://www.cnblogs.com/herd/p/7063091.html" target="_blank" rel="external">在阿里云上搭建自己的git服务器</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客图床的迁移</title>
      <link href="/posts/34286/"/>
      <url>/posts/34286/</url>
      
        <content type="html"><![CDATA[<p>之前一直在用 GitHub 的免费图床，但由于一些不稳定因素，图片经常打不开。虽然知道付费的图床更稳定，但是由于一些个人的原因，尽管我开通了空间，也一直没有正式投入使用。</p><p>但现在我已经准备好了，所以接下来就可以搭建新的稳定图床并迁移了。</p><h4 id="七牛云图床的搭建"><a href="#七牛云图床的搭建" class="headerlink" title="七牛云图床的搭建"></a>七牛云图床的搭建</h4><p>开通这个部分网上很多教程的，我就不赘述了，七牛云的官网指导也很清晰，大家注册后直接按照步骤操作，开通存储空间（存储桶）就可以了。</p><p><img src="http://image.tubbodetang.site/blog_picbed_1_2.png" alt=""></p><p>重点说一下解析的部分：</p><p><img src="http://image.tubbodetang.site/blog_picbed_1_3.png" alt=""></p><p>先在空间设置中绑定我们已经备案好的域名，然后会得到一个 CNAME。</p><p><img src="http://image.tubbodetang.site/blog_picbed_1_5.png" alt=""></p><p>去域名提供商那边把域名解析到这个 CNAME 即可，记录值填写七牛云提供的 CNAME（可以参考 <a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="external">七牛云 CNAME 配置说明</a> 来操作）：</p><p><img src="http://image.tubbodetang.site/blog_picbed_1_4.png" alt=""></p><p>不过解析过程可能需要等几分钟才会成功。</p><h4 id="图床的迁移"><a href="#图床的迁移" class="headerlink" title="图床的迁移"></a>图床的迁移</h4><p>随手配置一下之前的图床工具 PicGo</p><p><img src="http://image.tubbodetang.site/blog_picbed_1_1.png" alt=""></p><p>AccessKey/SecretKey 在七牛云的个人中心 - 密钥管理中可以找到</p><p>存储区域列表可以参考 <a href="https://developer.qiniu.com/kodo/manual/1671/region-endpoint" target="_blank" rel="external">七牛云说明</a> 填写</p><p>因为之前是直接用 GitHub 建了一个仓库做图床，所以素材直接打包下载下来了，不用到处去重新收集，不算太麻烦，下载之后直接打包上传到了七牛云的储存空间。这样我们通过之前配置好的外链地址，就可以直接访问上传的图片了。</p><p>接下来就是 Markdown 文章中的链接修改，其实可以写个代码批量修改。但是好在我的图片插的不多，懒得写代码了，直接手动改的……（好懒。</p><p>————————————</p><p>好了，到这里我博客的图床终于稳定了。以后可以更开心流畅地写文了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博客的一点感悟</title>
      <link href="/posts/62534/"/>
      <url>/posts/62534/</url>
      
        <content type="html"><![CDATA[<p>不知不觉的，开始写博客已经有一段时间了，一开始虽然说自己要开始写了，但是写的的确不多，一个月或者两个月能想到东西攒一下都不容易了，也是到了今年，手头其他的事情告一段落，才开始疯狂沉淀输出。</p><p>开始疯狂输出之后，到今天，我才开始发觉写博客真的是一件有趣且容易上瘾的事。</p><p>为什么说它有趣呢。</p><p>因为以前写的不多总会担心无话可写，但是写的越多越熟练，就会发现想写的东西越来越多，到现在待写文章的列表里已经列了一大堆等待我去填满，甚至觉得自己更像一个话痨了。这是反差上的有趣。而且想写的话题也是天南地北什么都有，从技术总结到个人感悟，还有一些身边发生的小事，我都想做个记录，所以这是内容上的有趣。</p><p>有趣同时也意味着新鲜感，开始写博客之后，为了有东西可写，我做了很多新的尝试，比如说买一个阿里云服务器来玩，开始用双拼打字以便写作加速等等。这些新的尝试，不仅用在了我的博客上，也用在了我工作生活的其他地方，让我的人生变得高效、多彩、有趣。</p><p>那它又为什么让人上瘾呢？</p><p>我觉得有很重要的一个原因，就是成就感。</p><p>会做不一定能说出自己是怎么做的，说出来还要让别人能看懂，也是一件不容易的事，一开始写博客最大的挑战也在这里。虽然很多事情自己做起来得心应手，三下五除二就能做完，难一点的查查资料，百度或者谷歌一下，也都能解决。但是解决的过程，你能不能复现，下次遇到，还能不能解决，甚至是不靠现查解决。还有你能不能说出发生这种事情背后的原因，以及为什么这样做就能解决的原因。而不是瞎猫碰上死耗子，今天碰巧试了一下解决了，明天又碰到同样的问题却忘记了自己是咋弄的，还要现查。</p><p>以前我遇到的很多问题，大多数都是这样不了了之的随他过去了，解决了这么多问题，同事们觉得我挺厉害的，但是问我为什么会这样，能不能教教他以后遇到怎么解决，我却常常说不出个一二三四，挺尴尬的。以至于后来，就没有什么人问我了，因为问我和问百度是一样的呀，反正都是找几个方案瞎试呗。</p><p>但是开始写作总结的话，情况就完全不一样了，为了写自己解决问题的过程，就必须先描述一下问题发生的背景，这个阶段就需要查一些资料去丰富自己的知识库。开始按步骤写解决问题的过程，又要确保简洁，人人都能看懂，这是对语言表达的考验。最后还得坚持，坚持每天做事情的时候都养成记录的习惯，一个事情完了还要整理、总结。偶尔做一下没什么，每天坚持去做，就非常不容易了。</p><p>所以当这些难点通通被克服，最后汇集成一篇篇博文列在首页的时候，当然就特别有成就感。</p><p>总之，最近的疯狂输出写作，让我自己停不下来，几乎每天都会打一些草稿放在草稿箱，随时准备补全发布。只是由于想做的事情太多，平时还得上课完成作业，上班工作，还有一些规定自己每天必须要完成的任务要完成，所以暂时还没有达到日日发布更新的水平。</p><p>不过随着我的写作速度变快，思路变多，技巧变成熟，慢慢的应该就能整理好自己的事物和写作记录之间的关系了。到时候天天发布更新，就是指日可待的事情了。</p><p>加油吧。我和我的博客，一起成长。</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云轻量应用服务器入坑</title>
      <link href="/posts/22932/"/>
      <url>/posts/22932/</url>
      
        <content type="html"><![CDATA[<h4 id="终于还是来到了阿里云"><a href="#终于还是来到了阿里云" class="headerlink" title="终于还是来到了阿里云"></a>终于还是来到了阿里云</h4><p>用 GitHub 做了一段时间的图床，我担心的事情还是发生了，图片链接开始变得不稳定，经常 timeout 404 了。</p><p>所以，还是绕不开的来到了购买阿里云服务器，域名备案，图床建立、甚至整个博客都搬上去的过程。不过后面的都是后话，今天先来聊聊阿里云服务器的入坑吧。</p><p>之前在云服务器这块也算是个小白了，不知道究竟五花八门的服务到底哪个比较适合，毕竟我最开始只是想有个稳定图床，哪想到后面还有这么大一个坑。</p><p>所以在阿里云上转了很久我也依旧没有走到最后一步付款，一个是真的看得很晕，另一个就是价格有点贵，真的有点受不了。</p><p>还好等了一个月，学生信息终于注册上了，通过了阿里云的学生认证，可以有优惠了，所以果断入坑，研究研究这一块，体验一下。</p><p>想买阿里云服务器的学生，可以看看下面的活动页和简介了解一下基本信息。</p><p><a href="https://promotion.aliyun.com/ntms/act/campus2018.html" target="_blank" rel="external">云翼计划</a></p><p><a href="https://yq.aliyun.com/articles/720693?spm=a2c4e.11155472.0.0.1afd3a20IZSflN" target="_blank" rel="external">阿里云服务器学生机具体介绍与购买指南</a></p><h4 id="ECS-和-轻量的比较"><a href="#ECS-和-轻量的比较" class="headerlink" title="ECS 和 轻量的比较"></a>ECS 和 轻量的比较</h4><p>比较可以看看这几篇文章：</p><p><a href="https://yq.aliyun.com/articles/575020" target="_blank" rel="external">阿里云轻量应用服务器和ecs云服务器哪个好？</a></p><p><a href="https://yq.aliyun.com/articles/700446" target="_blank" rel="external">阿里云虚拟主机、轻量应用服务器和ECS云服务器的区别</a></p><p><a href="https://blog.csdn.net/qq_41204464/article/details/90635404" target="_blank" rel="external">阿里云ECS 云服务器和轻量应用服务器 区别</a></p><p><a href="https://blog.csdn.net/lihuixin_/article/details/78021168" target="_blank" rel="external">ECS 还是轻量应用服务器，看完评测你就知道了？</a></p><p>我最后选了轻量，因为还在入门阶段，慢慢来吧，先把轻量吃透再说。</p><p>购买图：</p><p><img src="http://image.tubbodetang.site/blog_adv_3_1.png" alt=""></p><h4 id="备案之前的域名"><a href="#备案之前的域名" class="headerlink" title="备案之前的域名"></a>备案之前的域名</h4><p>之前已经在折腾博客的时候购买过域名了，所以接下来就是备案啦。</p><p><img src="http://image.tubbodetang.site/blog_adv_3_2.png" alt=""></p><p>备案流程如下图</p><p><img src="http://image.tubbodetang.site/blog_adv_3_3.png" alt=""></p><p>按照流程操作就可以了。期间还会提示用阿里云 App 操作审核会快一些，方便一些，也可以不用，我是用 App 操作的，感觉还挺方便的。</p><p>信息都提交了之后，就是等着了，期间会电话联系你确认一些信息，过几天就备案成功了，我大概等了两周就收到了备案成功的短信。</p><p><img src="http://image.tubbodetang.site/beian_success.jpg" style="zoom:50%;"></p><p>备案成功之后还得按照要求把自己的站点关联到域名并有访问记录，否则会说是空壳网站，会被警告并取消备案。这个还是得注意下，别花了很多时间精力以为万事大吉就不管了。</p><h4 id="想想未来"><a href="#想想未来" class="headerlink" title="想想未来"></a>想想未来</h4><p>有了轻量服务器可以做什么：</p><ul><li>首先就是我最开始想做的——图床</li><li>博客移植</li><li>代码服务器</li><li>发布自己的小项目</li><li>也可以自己搭一个云盘……</li></ul><p>总之能做的应该很多，但应该都是记录个人成长相关的，今天起步后，待我慢慢折腾吧。</p><p>————————————</p><p>本文完。</p><p>最后更新于 2019-11-16</p>]]></content>
      
      
      <categories>
          
          <category> 云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的 Hexo 博客进阶（四）</title>
      <link href="/posts/25109/"/>
      <url>/posts/25109/</url>
      
        <content type="html"><![CDATA[<p>有了博客，我们就要把他当作一个小产品去认真对待，正常站点需要做的维护，了解了之后，都可以在博客上试试水，看看它的表现如何。</p><p>这一篇主要还是针对搜索方面的小优化，其实针对搜索引擎进行站点的优化也是一门高深的学问，它就是 SEO，作为个人博我在这方面没有特别深究，经常是搜索其它问题的时候看到别人为自己的站点折腾了好多，觉得自己的博客也确实在某些方面存在不足，才想到要站在其他人的肩膀上去模仿着做的。</p><h4 id="优化页面地址"><a href="#优化页面地址" class="headerlink" title="优化页面地址"></a>优化页面地址</h4><p>据说层级越少，被搜索引擎爬取到的概率越大，那么 Hexo 博客默认的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></div></pre></td></tr></table></figure><p>最后生成的页面地址 <code>年/月/日/标题</code> 就层级太多，太简陋，太难看了。不由得让我露出了嫌弃的表情。</p><p>而且因为我们是中文写作的，所以 <code>title</code> 这里一般都会出现中文，然后就看到地址可能会是长长的转义字符，要不就是直接写中文，特别的……违和。</p><p>所以这次优化一方面是为了更利于搜索引擎爬取，另一方面也是想让博客看起来不那么简陋，看起来像那么回事一点。</p><h5 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h5><p>又是前人栽树后人乘凉，不用造轮子就是好，这位同道中人已经写好了工具：</p><p><a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="external">hexo-abbrlink</a></p><p>我们按照说明用一下就可以了，简洁方便。甚至在作者博客（底部链接）中我们还能看到插件迭代的说明和背后的思路。学习优化两不误。</p><p>使用过程大概是：</p><ol><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-abbrlink --save</div></pre></td></tr></table></figure></li><li><p>修改配置</p><p>博客根目录打开 <code>config.yml</code>，修改 <code>permalink</code> 属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">permalink: posts/:abbrlink/</div></pre></td></tr></table></figure><p>其中 <code>:abbrlink</code> 代表生成的连接地址。</p></li><li><p>重新生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure><p>可以看到文章头部的信息添加了一个 <code>abbrlink</code> 字段。比如我这篇：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: 我的 Hexo 博客进阶（四）</div><div class="line">tags: 博客搭建</div><div class="line">categories: 博客搭建</div><div class="line">abbrlink: 25109</div><div class="line">date: 2019-09-23 13:31:01</div></pre></td></tr></table></figure></li></ol><p>   这个 <code>abbrlink</code> 值以后就是我们页面恒久不变的地址了，可以方便搜索引擎来爬取。</p><ol><li><p>最后就是 <code>hexo d</code> 发布就可以了。</p></li><li><p>该插件其他两个属性配置参看作者说明即可，一般博客默认设置就足够使用了，无需做其他设置。</p></li></ol><p>操作到此就结束了。</p><h4 id="与正文无关的一点感慨"><a href="#与正文无关的一点感慨" class="headerlink" title="与正文无关的一点感慨"></a>与正文无关的一点感慨</h4><p>看作者博客的时候，发现这是一位年纪比较大（扎心），资历比较老的前辈了，从博客都可以窥见 2013 年发生的事，不过前辈在 2017 年的时候已经不再更新了，也有可能转去了公众号之类的吧，反正我是不相信一个曾经热爱记录的人会忽然就停止记录的。</p><p>嗯，记录还真是一件有意思有价值的事。没准哪天，留下的痕迹就对其他人有用了呢。加油。</p><p>————————————</p><p>参考文章：</p><p><a href="https://www.dabbei.cn/a2f2.html" target="_blank" rel="external">优化，提高访问速度，让必应、谷歌收录、百度收录</a></p><p><a href="https://post.zz173.com/detail/hexo-abbrlink.html" target="_blank" rel="external">hexo-abbrlink介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用图表总结——线图</title>
      <link href="/posts/34350/"/>
      <url>/posts/34350/</url>
      
        <content type="html"><![CDATA[<p>上次我们总结了柱图，这次来说说线图吧。</p><p>线图主要是用于展示连续变化的数据的变化趋势，既然是趋势，一般都会和时间扯上点关系，所以线图的横轴不会按类目来独立展示，一般只有一个变量就是时间。</p><p>在折线图中，数据是递增还是递减、增减的速率、增减的规律（周期性、螺旋性等）、峰值等特征都可以清晰地反映出来。当有多组相关数据在同一张图中时，也可用来分析多组数据随时间变化的相互作用和相互影响。</p><h4 id="最普通的线图"><a href="#最普通的线图" class="headerlink" title="最普通的线图"></a>最普通的线图</h4><p><img src="http://image.tubbodetang.site/line_1.png" alt="最普通的线图"></p><p>为了美观，也可以把线改为平滑曲线</p><p><img src="http://image.tubbodetang.site/line_2.png" alt="平滑曲线"></p><h4 id="面积图"><a href="#面积图" class="headerlink" title="面积图"></a>面积图</h4><p>如果给上面这条线加上阴影，就变成了面积图，面积图由于填充了颜色，所以更能带给人视觉上的冲击。</p><p><img src="http://image.tubbodetang.site/line_3.png" alt="面积图"></p><p>但是也要注意当对比多个类别数据的趋势时，最好把填色区域设置为带有透明度的颜色，否则就会像下图一样，发生重叠的情况，看不清楚。</p><p><img src="http://image.tubbodetang.site/line_5.png" alt=""></p><p>设置了透明度之后，效果就会好一些。</p><p><img src="http://image.tubbodetang.site/line_4.png" alt=""></p><p>不过尽管如此，当带有透明度的色块太多时也会发生层叠，导致不如单纯的线图看得清楚。</p><h4 id="堆叠面积图"><a href="#堆叠面积图" class="headerlink" title="堆叠面积图"></a>堆叠面积图</h4><p>和柱图一样，将面积图堆叠起来，就可以获得堆叠面积图，它像堆叠柱图一样也可以来展示占比情况，原理其实和堆叠柱图差不多，都是因为堆叠代表了整体总和，这样就可以看出单个类目在总体中的占比。</p><p>但和堆叠柱图相比，堆叠面积图依然突出了展示趋势变化的功能，即展示出了一段时间内，占比变化的趋势，而不仅仅是数量上的变化。</p><p>比如下图中（数据纯属虚构），我们就可以看出通勤的步数在总体中的占比变化，周一到周五由于要工作，所以有通勤的贡献率，而到了周末，不用上班，所以通勤没有贡献率了；也可以看出周一到周五工作太繁忙，没有时间走路锻炼，这个时候总步数里根本没有运动这一项的份额。到了周末才有功夫出去走走路，锻炼一下，这个时候才有了运动的份额，而到了周日想到第二天要工作，就没有走的太远，份额又有下降。</p><p><img src="http://image.tubbodetang.site/line_6.png" alt="堆叠面积图"></p><table><thead><tr><th>名称</th><th>展示数据数量</th></tr></thead><tbody><tr><td>线图</td><td>最好不要超过 5 条线，不同曲线数据相近的时候尤其要注意是否方便区分</td></tr><tr><td>面积图</td><td>最好不要超过 5 条线，过多容易重叠</td></tr><tr><td>堆叠面积图</td><td>不要超过 12 种颜色块</td></tr></tbody></table><p>————————————</p><p>P.S.</p><p>想直接学习的可以搜「墨者学院」</p><p>本文所有图表来自「Echarts」制作</p><p>转载请注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>病中杂谈</title>
      <link href="/posts/38700/"/>
      <url>/posts/38700/</url>
      
        <content type="html"><![CDATA[<h3 id="病中杂谈"><a href="#病中杂谈" class="headerlink" title="病中杂谈"></a>病中杂谈</h3><p>最近，我的身体出了一点问题，医生说是突发性耳聋，而更令人困扰的问题是，这个病原因不明。又或者是对于不同的人，激发的条件不同，可能性太多，所以最终就变成了原因不明。</p><p>我自己上网查了一些资料，大多数人都是由于精神压力，或者是休息不好而引起的。也有其他的一些原因，但可能因为相关性不明，所以并不能成为一个真正的原因。治疗的方式，看起来也只能从已知的部分来解决问题、缓解症状。即通过改善脑部血液循环，来改善负责耳朵的那些又少又小的血管的循环，从而激活和保护、恢复耳朵的功能。</p><p>我也一直在或积极或消极的配合治疗，哈哈，生病的人的心情，总归好不到哪里去，尤其是这种敌人看不见摸不着的情况下。</p><p>虽然在治疗，但是毕竟是神经上的毛病，在头颅里面，不像表面的伤口可以看到它一天天在愈合，感觉恢复的比较慢，还时有反复。所以急也急不得，只能老老实实的自己多注意休息和调整了。<br>还好，我目前感觉已经恢复的不错了，希望后面也能身体健康吧……</p><p>有些事情，身体好的时候，好像根本都不叫什么事，可是身体不好的时候， 他们就统统挤进了你的大脑，开始发酵。果然人有多坚强，人就也能有多脆弱。</p><p>所以生病的时候，我总是在天马行空的乱想很多事情，虽然总是没什么意义也没什么标准答案的事情。但我也想把他们记录下来。毕竟也算是一场奇特的头脑风暴之旅吧。</p><h4 id="1"><a href="#1" class="headerlink" title="1/"></a>1/</h4><p>我之前总想说，多做做记录，把自己存在过的痕迹多少留下来。显而易见，现在最方便的方式就是通过互联网这个平台做记录，一个是容易开始，另一个是能让更多的人看见。但是，这些数据信息被无情抹掉的风险其实更大，总会有什么服务器因不可抗因素损坏、程序员删库跑路这种意外事件发生吧。一旦发生，那总有些数据就永久不能恢复了。</p><p>如果选择借助互联网平台来记录自己思想的方式，那么我们唯一能做的，就是多多备份自己的电子数据，多个平台都保存，自己硬盘上再存一份，然后互联网中重复的数据垃圾也变得更多了……（关于重复的数据垃圾，随便一搜索，那些复制粘贴转载还不注明出处的文章就有一大把了）</p><h4 id="2"><a href="#2" class="headerlink" title="2/"></a>2/</h4><p>还是记录的这件事。我在生病输液的时候，每天都会看点书，刚好把「三体」三部曲完完整整的看完了。之前总是看看停停，所以一直到现在才完整的看完一遍，实在太精彩，甚至有点舍不得看完。</p><p>「死神永生」中，关于人类文明在冥王星上的纪念馆，这其实也是一种记录，是太阳系人类的记录。说实在的，能在茫茫宇宙的沧海桑田中，哪怕留下一点点痕迹，就已经很成功了。从记录的方式来看，反而最简单原始的刻在石头上，能保留的时间是最长的。而回到个人的记录，借助互联网平台把数据保存在云端服务器里，在历史的长河中就显得摇摇欲坠了。毕竟现在要看自己 2010 年发的微博，都只能通过 PC 端的网页才能看见，移动端是不支持一直翻那么多页的。没准过个十几年或几年，就因为数据太多无法维护，开始清空之前的数据了……</p><p>这两种记录方式还有一个很重要的对比，就是译解的难度。我个人认为，好像直接刻在石头上的简单表意符号，更容易让完全不了解的人看懂，而已经经过二进制转化的数据好像就太难懂了一些，总不能指望一眼就能看懂一串 01010 的含义吧……不过这也是站在我自己角度的瞎想，没准对于未来的人，这些都不是太大的问题。</p><h4 id="3"><a href="#3" class="headerlink" title="3/"></a>3/</h4><p>还是留下痕迹的问题，我也不知道为啥老是纠结于这个问题，可能真的害怕被人忘记吧，哈哈。<br>最近过得都很佛系，闲下来的时间都在放轻松，不给自己太大压力。然后就看「乐队的夏天」这个节目。我太喜欢音乐了，且不说其他的，有音乐就是好的。然后有人在里面提到了邓丽君。我在想，邓丽君，还会继续存在在这个世界上多久？周杰伦也在歌词中说：「音乐是会留下来的」。<br>对啊，那些童谣留下来了多久？古典音乐又留下来了多久？原始部落的打击乐又留下来了多久？</p><h4 id="4"><a href="#4" class="headerlink" title="4/"></a>4/</h4><p>关于人的思维的问题。身体生病的时候，只要手指还能动，思维不受影响，我们就可以上网和其他人交流。哪怕在现实生活中我们狼狈不堪，生病有着怏怏的样子，我们在网上的表达，却可以和正常人一样，又或者说，其他人通过我们的表达其实看不出来我们有着各种缺陷和身体上的问题。朋友甚至说：「你看看你现在的样子，还不如在网上生龙活虎」。是啊，就和之前被爆出来的网络主播一样，我们在网上的自己，和在真实生活里的自己完全可以是两个状态吧。</p><p>网络也像个小社会，但它所呈现的，好像更像思维与思维之间的连接，因为人的实体形象被弱化了，你在网上所呈现的更贴近你大脑里此时此刻所想的。这也有点让人联想到霍金，虽然他的身体已经塌陷的不成样子，但他的思维却依然闪烁熠熠光辉，飞向广阔的宇宙，并且还可以通过特殊的工具与其他人交流。他和我们讲冷笑话的时候，如果不看到他的实体，你可完全想不到，他已经病得如此重了。</p><p>那么问题来了，思维在人这个角色里，究竟扮演了多大的戏份？</p><h4 id="5"><a href="#5" class="headerlink" title="5/"></a>5/</h4><p>通过这一段时间的胡乱思考，我只能更加深了一个想法，就是人的实体虽然终究留不下来，但是人的思维，人通过思维所创造的一些东西，比如人的言论，比如艺术，比如思考的痕迹，最后能留下来的时间更长。虽然它也可能最终消失，但是只要有一个人记得，并一直引述传播这些思想，你就可能永远的活在传说里。就像之前那句网络流行语说的：「不要羡慕哥，哥只是个传说」。</p><p>但是也可能，在历史的以讹传讹中，最后的传说，和你最开始所想所说的，已经大相径庭了。如果是因为这样被人记得，人们记得的还是你吗？就像人人都瞎说的鲁迅说一样，不知道以后的人在听了瞎说之后，最终认为鲁迅是个什么样的人……</p><p>——————————<br>碎碎念到此结束 :）</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的 Hexo 博客进阶（三）</title>
      <link href="/posts/28268/"/>
      <url>/posts/28268/</url>
      
        <content type="html"><![CDATA[<p>上回提到GitHub 有防百度爬虫的措施，所以我们在 Coding Pages 服务上也部署了一遍博客，这还只是折腾之路的第一步。</p><p>其实由于 Github 和 Coding 都做了防爬虫处理，搜索引擎是无法直接发现我们博客的，这样别人在搜索问题的时候，搜出来的答案也不会包含我们博客中的内容，相当于我们一直都是在自说自话，所以我们必须要给搜索引擎提交我们的博客站点，才能让搜索引擎知道站点的存在，这样搜索的结果才会有我们的内容。</p><p>我们写个人博客虽然不需要什么竞价排名买搜索前列这种操作，但是也不能让搜索结果里完全不存在啊，话不多说，就是干。</p><h3 id="让各大搜索引擎收录博客"><a href="#让各大搜索引擎收录博客" class="headerlink" title="让各大搜索引擎收录博客"></a>让各大搜索引擎收录博客</h3><h4 id="博客的准备工作"><a href="#博客的准备工作" class="headerlink" title="博客的准备工作"></a>博客的准备工作</h4><p>为了让搜索引擎知道我们都有什么页面需要被收录，我们先要准备一个文件，里面包含我们博客所有文章的地址，即站点地图（sitemap）。</p><p>怎么生成这样一个站点地图呢，已经有好心人开发了现成的工具了，npm 安装一下就可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">百度：npm install hexo-generator-baidu-sitemap --save</div><div class="line">谷歌：npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure><p>插件使用如果有问题可以去 <a href="https://www.npmjs.com/package/hexo-generator-sitemap" target="_blank" rel="external">hexo-generator-sitemap</a> 和 <a href="https://www.npmjs.com/package/hexo-generator-baidu-sitemap" target="_blank" rel="external">hexo-generator-baidu-sitemap</a> 查看说明</p><p>然后修改博客根目录下的配置文件 <code>_config.yml</code>，添加以下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自动生成sitemap</span></div><div class="line"><span class="attr">sitemap:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></div><div class="line"><span class="attr">baidusitemap:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></div></pre></td></tr></table></figure><p>如果绑定了域名，想收录域名下的地址，注意要把这项配置改为自己的域名，否则收录的网址可能会不准确。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span> <span class="attr">http://www.tubbodetang.site</span></div></pre></td></tr></table></figure><p>最后执行我们已经熟悉的博客生成和部署命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure><p>在 <code>public</code> 目录下，就可以看到生成的 <code>sitemap.xml</code> 和 <code>baidusitemap.xml</code> 两个文件，打开也可以看到生成的 <code>baidusitemap.xml</code>  和 <a href="https://ziyuan.baidu.com/college/articleinfo?id=267&amp;page=2" target="_blank" rel="external">百度平台工具使用帮助</a> 中要求的 sitemap 格式是一致的，这就是我们准备好的站点地图了。</p><h4 id="将站点地图提交到搜索引擎"><a href="#将站点地图提交到搜索引擎" class="headerlink" title="将站点地图提交到搜索引擎"></a>将站点地图提交到搜索引擎</h4><p>首先我们要搜索引擎的站长管理工具去注册站长帐号，注册过程就不废话了。</p><ul><li><a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">百度</a></li><li><a href="https://www.google.com/webmasters/" target="_blank" rel="external">谷歌</a>（自己想办法访问）</li><li><a href="https://www.bing.com/toolbox/webmaster" target="_blank" rel="external">必应</a>（由于前两个一个不好访问，一个搜索结果不尽人意，必应也是一个好的选择）</li></ul><p>提交过程其实都差不多，都是：添加网址-验证权限-上传站点地图-等待，这么一个流程。</p><h5 id="先说说百度："><a href="#先说说百度：" class="headerlink" title="先说说百度："></a>先说说百度：</h5><p>登录后在用户中心-站点管理中，添加站点，按照步骤操作</p><p><img src="http://image.tubbodetang.site/blog_adv_2_1.png" alt="添加站点"></p><p><img src="http://image.tubbodetang.site/blog_adv_2_2.png" alt="百度验证"></p><p>下载验证文件，然后放在博客的 <code>themes</code> 主题文件夹的 <code>source</code> 目录下，这样博客生成发布之后，这个文件才会在站点的根目录。</p><p>然后还是这两步，生成发布博客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure><p>此时我们的 <code>public</code> 文件夹里就有了验证文件。</p><p>按照步骤验证，最后验证成功。</p><p><img src="http://image.tubbodetang.site/blog_adv_2_3.png" alt="验证成功"></p><p>到这里我们已经把站点添加到了平台中。</p><p>最后进入站点管理，点击我们刚刚添加的站点，在导航栏找到：数据引入-链接提交，就可以上传我们准备好的 sitemap 了。</p><p>地址按照要求填写即可：<code>yoursite/baidusitemap.xml</code></p><p><img src="http://image.tubbodetang.site/blog_adv_2_5.png" alt="提交百度站点地图"></p><p>这里可以看到提交站点其实有很多种方法，甚至可以手动一个一个粘贴提交，自动提交也可以用代码主动推送，我这里只选择了最方便的 sitemap 解决方案，如果想要更快速的提交自己的站点，也可以查一查主动推送的实现方法。</p><p>提交之后，可以看到自己的站点正在等待被抓取，这个等待时间不一定，新站可能会更慢，百度的脾气，大家是知道的，如果等不及，建议还是上主动推送。</p><p><img src="http://image.tubbodetang.site/blog_adv_2_6.png" alt="提交结果"></p><h5 id="再说说谷歌："><a href="#再说说谷歌：" class="headerlink" title="再说说谷歌："></a>再说说谷歌：</h5><p>谷歌和百度除了站长平台的界面长得不一样以外，其他流程都是一样的。就不啰嗦了，还是添加一个站点，然后按步骤验证：</p><p><img src="http://image.tubbodetang.site/blog_adv_2_4.png" alt="谷歌验证"></p><p>下载文件之后放在博客的 <code>themes</code> 主题文件夹的 <code>source</code> 目录下，生成发布博客：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure><p>就可验证成功了。</p><p>然后在站点地图的地方添加站点地图 <code>sitemap.xml</code> 即可</p><p><img src="http://image.tubbodetang.site/blog_adv_2_7.png" alt="谷歌站点添加"></p><p>提交之后一样看到爬取结果。谷歌的比百度快一些，基本一天之后就有状态了。</p><h5 id="最后是-Bing-必应："><a href="#最后是-Bing-必应：" class="headerlink" title="最后是 Bing 必应："></a>最后是 Bing 必应：</h5><p>除了上面的方法，必应比较贴心的准备了和 Google 站长的关联选项，所以我这里就不再重复操作了，直接关联上 Google 站长的信息就可以了。</p><p><img src="http://image.tubbodetang.site/blog_adv_2_8.png" alt="Bing"></p><p>不过必应的收录要求也挺高的，据说他喜欢收录图片站和文章比较长的，收录前还会观察你的站点是否是频繁更新的。收录的时间周期也比较长。</p><p>所以除了提交我们的站点到各大搜索引擎以外，最重要的还是好好写文，努力积累！</p><p>————————————</p><p>参考文章：</p><p><a href="https://www.i5seo.com/must-be-included-in-how-to-allow-bing-to-quickly-collect-your-website.html" target="_blank" rel="external">必应收录之如何让bing快速收录你的网站</a></p><p><a href="https://www.jianshu.com/p/8c0707ce5da4" target="_blank" rel="external">Hexo博客收录百度和谷歌-基于Next主题</a></p><p><a href="https://www.jianshu.com/p/f8ec422ebd52" target="_blank" rel="external">Hexo博客提交百度和Google收录</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的 Hexo 博客进阶（二）</title>
      <link href="/posts/25110/"/>
      <url>/posts/25110/</url>
      
        <content type="html"><![CDATA[<p>有了博客之后，当然是需要被更多人看到了，我们总不希望自己写博客是写给自己看，自说自话的吧，那就不叫博客，叫日记了。所以博客进阶，我们来讲讲如何让更多人看到我们的静态博客。</p><p>由于 GitHub 有防百度爬虫的措施，建议把我们的博客在 <a href="https://coding.net/" target="_blank" rel="external">Coding</a> 上也做一遍，这样国内用的比较多的百度搜索可以通过爬取 Coding 上的页面来找到我们的博客，国外搜索也不影响，双管齐下，提升我们博客被发现的效率。</p><p>Coding 是腾讯旗下的代码托管平台，和 GitHub 类似，所以 Coding 同步 GitHub 博客，流程其实也和 GitHub 开启 Pages 服务差不多，有过 GitHub 部署博客的经验，相信在 Coding copy 一份也不是什么难事。</p><h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4><p>万事第一步，注册。不多说，先自行注册一个 Coding 平台的账号。</p><h4 id="Coding-建立仓库及准备"><a href="#Coding-建立仓库及准备" class="headerlink" title="Coding 建立仓库及准备"></a>Coding 建立仓库及准备</h4><h5 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h5><p>这里可以直接提交我们的静态博客到新建的空仓库，也可以参阅 <a href="https://dev.tencent.com/help/git-import-tencentcloud" target="_blank" rel="external">腾讯开发者平台中的说明</a> 将 Github 上的仓库导入到 Coding。</p><p>我这里采用的是导入的方法：</p><p>在 Coding 中新建一个名为 <code>yourname.coding.me</code> 的项目，不勾选 <code>启用 README.md 文件初始化项目</code>，也不添加 <code>License</code> 和 <code>.gitignore</code> 文件。项目地址那里，会根据你的项目名称自动生成。由于 pages 服务对项目名有特殊要求，所以这里我们要尽量写成下面的形式，不然可能会造成页面无法正常打开，后面修改路径会很麻烦还容易出错。</p><p><img src="http://image.tubbodetang.site/blog_adv_2_10.png" alt=""></p><h5 id="添加-SSH-Key"><a href="#添加-SSH-Key" class="headerlink" title="添加 SSH Key"></a>添加 SSH Key</h5><p>以前用 GitHub 的时候已经生成过密钥，密钥所在目录为(<code>C:\Users\yourUserName\.ssh\id_rsa</code>)，直接拷贝之后在个人设置中添加就好了</p><p><img src="http://image.tubbodetang.site/blog_adv_2_9.png" alt=""></p><p>然后测试一下公钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@git.coding.net</div></pre></td></tr></table></figure><p>成功之后就可以向 Coding 提交代码了。</p><h4 id="导入-GitHub-的博客仓库到-Coding"><a href="#导入-GitHub-的博客仓库到-Coding" class="headerlink" title="导入 GitHub 的博客仓库到 Coding"></a>导入 GitHub 的博客仓库到 Coding</h4><p>见 <a href="https://dev.tencent.com/help/git-import-tencentcloud" target="_blank" rel="external">腾讯开发者平台中的说明</a> </p><p>大致步骤如下：（注意地址要和自己的仓库保持一致）</p><ol><li><p>将 Github 上想要导入的项目完整克隆到本地。</p><p>本地执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/yourname/yourname.github.io.git --bare</div></pre></td></tr></table></figure></li><li><p>克隆完成后，将克隆好的仓库推送到 Coding 上。<br>使用 Coding 仓库页面提供的 URL。推送所有的分支和对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd yourname.github.io.git</div><div class="line"></div><div class="line">git push https://git.dev.tencent.com/yourname/yourname.coding.me.git --all</div></pre></td></tr></table></figure></li><li><p>完成后，再推送所有的标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push https://git.dev.tencent.com/yourname/yourname.coding.me.git --tags</div></pre></td></tr></table></figure></li></ol><p>这样，整个博客仓库就全部导入到 Coding 了。</p><h4 id="博客设置同步推送"><a href="#博客设置同步推送" class="headerlink" title="博客设置同步推送"></a>博客设置同步推送</h4><p>修改博客根目录下的<code>_config.yml</code>文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> </div><div class="line"><span class="attr">      github:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span></div><div class="line"><span class="attr">      coding:</span> <span class="string">git@git.dev.tencent.com:yourname/yourname.coding.me.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure><p>测试一下是否正确，需要重新生成部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure><p>看到 Github 和 Coding 同步更新的记录，说明设置成功。</p><h4 id="打开-Coding-的-Pages-服务"><a href="#打开-Coding-的-Pages-服务" class="headerlink" title="打开 Coding 的 Pages 服务"></a>打开 Coding 的 Pages 服务</h4><p>直接在左侧栏找到 <code>代码 - pages 服务</code> 选项卡，一键开启即可。</p><p><img src="http://image.tubbodetang.site/blog_adv_2_12.png" alt="开启 Pages 服务"></p><p>片刻，开启成功：</p><p><img src="http://image.tubbodetang.site/blog_adv_2_13.png" alt=""></p><p>直接点击访问地址，就可以看到自己的静态博客了。</p><p>Coding 会帮我们自动做一些配置，因为我们的博客只有 master 分支，所以默认就建立在 master 分支上。我们也可以做一些其他的设置，比如绑定域名之类的，这个在 <a href="">博客进阶（一）</a> 中我们已经讲过，有需要的可以参考设置一下。</p><p><img src="http://image.tubbodetang.site/blog_adv_2_11.png" alt=""></p><p>至此，我们的 Coding 博客已经全部设置完成了。下一篇打算整理一下怎么把站点提交到各大搜索引擎，让他们的爬虫来发现我们的博客。</p><p>————————————</p><p>参考文章：</p><p><a href="http://fengdi.org/2017/08/07/Hexo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96.html" target="_blank" rel="external">Hexo博客之速度优化</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的 Hexo 博客进阶（一）</title>
      <link href="/posts/62063/"/>
      <url>/posts/62063/</url>
      
        <content type="html"><![CDATA[<p><a href="www.tubbodetang.site/2017/09/02/Hexo 博客搭建/">Hexo 博客搭建</a> 这篇文章已经讲了如何借助 Hexo 搭建一个静态博客，目前我们的博客已经有了属于我们的内容和样式风格，也可以借助 GitHub 的 Pages 功能在互联网上访问到了，那么如何才能让我们的博客写起来效率更高，更高大上呢？</p><h4 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h4><p>用 Markdown 写博客，有一个最不好处理的地方就是，插入图片的时候，图片的地址链接不好做。</p><p>图床就是为了储存我们的图片，并且生成可以在互联网上任意访问的服务器地址的，有了服务器地址，我们储存在图床的每一个图片，就都有自己专属的地址链接了。</p><h5 id="图床的选择"><a href="#图床的选择" class="headerlink" title="图床的选择"></a>图床的选择</h5><p>图床其实也有很多的解决方案，甚至有很多免费的图床，但是免费总有一定的风险：</p><ul><li>指不定哪天就停止维护了（对于个人维护的图床站尤其如此）</li><li>有可能突然加了防外链，让我们的图片无法访问（比如简书、微博图床以前可用，现在都不能用了）</li></ul><p>所以我们这里还是建议使用付费的大品牌存储来建立私人图床，可以相对稳定一些，不用担心未来的迁移成本。</p><p>付费图床比如：</p><ul><li>腾讯 COS 储存</li><li>阿里云 OSS 储存（目前收费是这几个里最贵的）</li><li>七牛云（提供的测试地址只能使用 30 天，后续用得绑定已备案域名，有些麻烦）</li><li>又拍云</li></ul><p>我这里由于一些其他问题，暂时注册了图床空间但还没有开始使用，所以对具体的图床建立方式就不介绍了。</p><h5 id="图床工具"><a href="#图床工具" class="headerlink" title="图床工具"></a>图床工具</h5><p>有了专属的图床空间之后，我们还需要一个便捷的上传、生成链接的工具来配合我们日常使用，否则手动一张一张传照片再一张一张复制地址，就很让人心累了。</p><p>图床工具也有很多，甚至让人眼花缭乱，而且根据不同数据储存服务商提供的 API 我们自己也能写一些小工具，不过这样就很费事了，喜欢折腾的同学可以多试试，我这里只分享两个使用的人比较多，我个人也比较喜欢的：</p><ul><li><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="external">PicGo</a>（Windows）</li><li><a href="https://toolinbox.net/iPic/" target="_blank" rel="external">iPic</a>（MacOS）。</li></ul><p>可以点击链接看看官方文档配置使用，配置都比较简单，不难上手。因为是个人开发，觉得做得好的朋友可以给他们点赞支持，这样我们才能一直有好用的软件用，省的自己造轮子。</p><h5 id="我的图床搭建"><a href="#我的图床搭建" class="headerlink" title="我的图床搭建"></a>我的图床搭建</h5><p>我因为一直在用 Windows 环境工作，所以自然选择 PicGo 作为我的图床工具。PicGo 中还贴心的提供了 GitHub 图床的上传方式，由于我目前还无法使用付费的图床空间，所以刚好配合 PicGo 用 GitHub 仓库建立了一个图床。</p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github图床" target="_blank" rel="external">GitHub 图床搭建，配合 PicGo 使用的方法</a></p><p>这个方式也是免费的，相对也稳定，但最可怕的就是，GitHub 国内访问有时很慢，还有一定的 404 风险，所以后期我也会尽快更换付费图床的。到时候再对图床的搭建这一部分进行更新。</p><h4 id="域名的购买以及关联"><a href="#域名的购买以及关联" class="headerlink" title="域名的购买以及关联"></a>域名的购买以及关联</h4><p>使用 GitHub Pages 功能搭建博客之后，默认的地址都是 github.io 这样的形式，虽然说不是不能用，但是就是看起来有点低级，不太像属于个人的博客，倒像是属于 GitHub 的博客。</p><p>所以有条件的朋友，可以挑选一个属于自己的域名，然后关联到 GitHub 博客，这样的话，其他人看到我们的博客就更具有我们个人的品牌色彩了。</p><p>暂时没有打算关联域名的朋友，就不用看这一部分的内容了。</p><h5 id="域名的购买"><a href="#域名的购买" class="headerlink" title="域名的购买"></a>域名的购买</h5><p>我是在阿里云买的，也可以去腾讯云等等其他出售域名的网站购买。</p><p>购买前先挑一个自己中意的，然后搜索一下是否可用，就可以加入购物车付费购买了，和淘宝一个流程。不同的域名价格也不同，有的还有连续购买多年的优惠活动，还有一些网站会举办新用户赠送一年免费域名这种活动，都可以了解一下，然后做个对比，选择一个最适合自己的就可以了。</p><p><img src="http://image.tubbodetang.site/blog_adv_1.png" alt="阿里云域名购买"></p><h5 id="域名的关联"><a href="#域名的关联" class="headerlink" title="域名的关联"></a>域名的关联</h5><p>有了域名之后，我们还要对域名进行实名认证，没有认证的域名状态会显示未认证，无法正常使用，这一步也很简单，只要上传一下身份证信息，几分钟之后就可以认证成功了。</p><p><img src="http://image.tubbodetang.site/blog_adv_2.png" alt="域名认证"></p><p>然后我们对域名添加解析，解析到自己 GitHub Pages 博客的 IP 地址。</p><p><img src="http://image.tubbodetang.site/blog_adv_3.png" alt="添加解析"></p><p>过几分钟之后在 GitHub 的配置中，可以看到已经关联到了我们的域名。</p><p><img src="http://image.tubbodetang.site/blog_adv_4.png" alt=""></p><p>此时再访问我们的域名，就可以看到博客已经可以直接通过域名打开了。</p><p><em>关于备案的小知识</em></p><p>购买域名的很多搜索结果里都会说到备案这件事。那么我们的域名没有经过备案可以用吗？会不会因为没有备案就产生什么问题呢？</p><p>其实备案主要是针对网站备案，域名只是网站的“代号”而已，所以其实域名是不存在备案一说的，对域名的备案只是对网站备案的简称罢了。</p><p>GitHub 博客是放在 GitHub 的国外服务器的，所以不用备案，博客也可以正常使用。</p><p>如果你还想把博客建立在自己购买的服务器上，不用 GitHub 的 Pages 服务，就要对自己购买的服务器进行备案建站，然后关联域名，这个时候，你的域名也相当于已经备过案了。</p><p>但是，环境特殊，我们还是注意不要写不该写的内容。否则有一天被 404 了，就真的需要自己买服务器建站写博客了，随之而来也有很高的迁移成本。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 踩坑记录</title>
      <link href="/posts/40166/"/>
      <url>/posts/40166/</url>
      
        <content type="html"><![CDATA[<p>决定踩一下 Flutter 的坑了，做个记录。</p><p>教程的话，起步我觉得看这个就够：<a href="https://flutterchina.club/" target="_blank" rel="external">Flutter 中文网</a></p><h3 id="Flutter-踩坑记录"><a href="#Flutter-踩坑记录" class="headerlink" title="Flutter 踩坑记录"></a>Flutter 踩坑记录</h3><p>整个过程可能会用到梯子。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>可以去官网下载 zip 包（要梯子）或者 直接去 Flutter 的 GitHub 项目中 download or clone 你需要的版本。</p><p><a href="https://github.com/flutter/flutter" target="_blank" rel="external">GitHub地址</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>然后就是按照教程里的步骤解压配置即可，但是配置的时候有 4 点最需要注意：</p><p><strong>1、现在 Flutter SDK 要求 有 Powershell 5.0 + </strong></p><p>win 7 如果没有的，可以去 <a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-windows-powershell?view=powershell-6" target="_blank" rel="external">微软下载中心</a> 下载一个，下载中心里面也有查看版本的相关说明</p><p><strong>2、如果是 zip 包，解压的时候可能会忽略隐藏的 .git 文件夹造成错误。</strong></p><p>有两个解决办法：</p><ol><li><p>在解压目录下手动初始化一个 git 项目，就有 .git 文件夹了</p></li><li><p>以 clone 方式下载项目，可以直接带 .git 文件</p></li></ol><p>但是经过我的尝试，还是建议直接 clone 项目，因为下载 zip 包的问题实在是太多了，后面执行 <code>flutter doctor</code> 命令的时候也会因为 .git 的问题而自动退出，还是直接 clone 省事。</p><p><strong>3、一定不要放在需要权限比较高的文件夹下解压或 clone，否则会说此时不应有 bin/cache</strong></p><p>可以直接解压在某盘的根目录，成功概率大。</p><p><strong>4、环境变量配置和国内镜像配置，按要求配置就好。</strong></p><p>配置完以上，可以在全局使用 flutter 命令了，第一次用 flutter 命令的时候会自动下载 dart sdk，</p><p>以及一些升级工作。</p><p><img src="http://image.tubbodetang.site/flutter_1_1.png" alt=""></p><p>然后 运行 <code>flutter doctor</code> 看看还缺啥没安，</p><p><img src="http://image.tubbodetang.site/flutter_1_2.png" alt=""></p><p>我因为之前研究 ionic 的时候配置过安卓开发的一些东西，当时也踩了好多坑才配置好，所以这次基本都有了，只有 Android  SDK 需要升级，然后 Android Studio 要安一下插件这两个问题。doctor 命令很贴心，解决方案也写在上面了，按照要求处理就好了。</p><p>如果从来没有配置过 Android SDK 的童鞋，还得专门找详细的教程来配置，比较麻烦，需要耐心。也可以参考我之前写的 <a href="">ionic 开发踩坑</a> 里面的部分内容来助你踩坑。</p><p>问题全部解决之后再  <code>flutter doctor</code>  可以看到已经没有 issues 了 </p><p><img src="http://image.tubbodetang.site/flutter_1_3.png" alt=""></p><p>然后就可以愉快的开发了。</p><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><p>最后提一嘴开发环境。</p><p>官方推荐是 Android Studio 来开发，我虽然也安装了，但是还是觉得它过于复杂，所以我暂时还在用 VS Code 在开发。</p><p>在 VS Code 里装一下 Dart 和 Flutter 插件，然后就可以愉快的在 VS Code 中使用 Flutter 命令和 Dart 语法提示了，也可以调试和热重载。现阶段还是够用的，后面如果有高级需求了再上 Android Studio 吧。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的 Tricks - 03</title>
      <link href="/posts/929/"/>
      <url>/posts/929/</url>
      
        <content type="html"><![CDATA[<h3 id="程序员的-Tricks-03"><a href="#程序员的-Tricks-03" class="headerlink" title="程序员的 Tricks - 03"></a>程序员的 Tricks - 03</h3><p>这个系列好久没继续了，说明好久没遇到奇葩的需求，虽然没遇到奇葩需求很开心，但是系列文章没得可写了也是挺纠结的呢。</p><p>今天来聊聊之前遇到的一个奇葩事。</p><p>咨询人员给了我们一个 Excel 文档，里面只有一个根据数据生成的散点图，源数据的表格并不在这个文档里，而他的要求是……让我们用图里的数据拟合出曲线公式来，然后用拟合出来的公式计算数据。</p><p><img src="http://image.tubbodetang.site/tricks_3_0.png" alt=""></p><p>当时我和我的小伙伴内心又是万马奔腾，可以看到图中数据点很密，点都已经连成线了，根本不是靠带几个值就能反算或者是根据图表上的几个数据点就能编出计算结果来的……</p><p>面面相觑之后还是得靠百度，看看有没有合适的解决方案，毕竟程序员也不是万能的。没有的话，就只能取几个临近点估值了，但那样就无法得到用于自动化计算的公式了。</p><p>在搜索引擎里找答案，靠的真的是一种问问题的能力，换了几种问法之后，我终于搜到了解决这个问题的关键钥匙：Excel 里的宏。</p><p>宏是一个计算机术语，说得是批量处理的事儿。不过在 Excel 中，宏则指 Excel 自动集成的 VBA 高级程序语言编制出的程序。借助这样的程序，我们就可以批量处理需求了。</p><p>说到这里又说了一个新词：VBA（Visual Basic Application）</p><p>它是微软为了扩展 Windows 应用程序功能而开发出来的一种通用编程语言，是 VB（Visual Basic）语言的一个子集，这种语言写出的程序，可以且只能在 Windows 桌面应用中执行。（也有不法分子利用这点编制目的不良的宏病毒利用文件来传播）</p><p>有哪些 Windows 桌面应用程序有执行 VBA 的能力呢？</p><p>其实最有名的几大 Office 办公软件：Word、PowerPoint，当然也包括我们今天要说的 Excel，都是能执行 VBA 的应用程序。</p><p>学会了 VBA，使用这些软件解决问题和办公的效率将大大提升，所以其实 VBA 完全可以作为一个单独的技能去学习。不过这不是我们今天的重点，我们的重点，只是了解一下这个功能，并看看它有多么强大，以便以后有需求的时候能速速想起并运用。</p><p>我找到的是一段可以解决我问题的 VBA 代码，现在就来应用它试一试。</p><p>首先打开 Excel（我的是 2013），然后在表名上右击打开代码编辑器。</p><p><img src="http://image.tubbodetang.site/tricks_3_1.png" alt=""></p><p>代码编辑器长这样：</p><p><img src="http://image.tubbodetang.site/tricks_3_2.png" alt=""></p><p>在 ChartData 表（表名也要和程序中的对应才能找到对象）填入如下代码。</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Sub</span> GetChartValues()</div><div class="line">   <span class="keyword">Dim</span> nRows As Integer</div><div class="line">   <span class="keyword">Dim</span> X As Object</div><div class="line">   Counter = <span class="number">2</span></div><div class="line"></div><div class="line">   nRows = <span class="built_in">UBound</span>(ActiveChart.SeriesCollection(<span class="number">1</span>).Values)</div><div class="line">    <span class="comment">'数据的数量 nRows </span></div><div class="line">   Worksheets(<span class="string">"ChartData"</span>).Cells(<span class="number">1</span>, <span class="number">1</span>) = <span class="string">"X Values"</span>  </div><div class="line">    <span class="comment">'ChartData 表的（1，1）格写 “X Values”</span></div><div class="line"></div><div class="line">   <span class="keyword">With</span> Worksheets(<span class="string">"ChartData"</span>)</div><div class="line">      .Range(.Cells(<span class="number">2</span>, <span class="number">1</span>), .Cells(nRows + <span class="number">1</span>, <span class="number">1</span>)) = Application.Transpose(ActiveChart.SeriesCollection(<span class="number">1</span>).XValues)</div><div class="line">   <span class="keyword">End</span> <span class="keyword">With</span></div><div class="line">   <span class="comment">'_从第(2,1)格开始，到第(nRows + 1,1)格，填入选中图表的所有 X 值_</span></div><div class="line"></div><div class="line">   <span class="keyword">For</span> <span class="keyword">Each</span> X <span class="keyword">In</span> ActiveChart.SeriesCollection </div><div class="line">   <span class="comment">'如果图表有多个系列值，依次循环输出到 2、3、4 ... n 列</span></div><div class="line">      Worksheets(<span class="string">"ChartData"</span>).Cells(<span class="number">1</span>, Counter) = X.Name</div><div class="line">      <span class="comment">'在第一行写入系列名</span></div><div class="line">      <span class="keyword">With</span> Worksheets(<span class="string">"ChartData"</span>)</div><div class="line">         .Range(.Cells(<span class="number">2</span>, Counter), .Cells(nRows + <span class="number">1</span>, Counter)) = Application.Transpose(X.Values)</div><div class="line">      <span class="keyword">End</span> <span class="keyword">With</span></div><div class="line">      <span class="comment">' _从第(2,n)格开始，到第(nRows + 1,n)格，，填入选中图表第 n 系列的所有 X 值对应的 Y 值_</span></div><div class="line">        Counter = Counter + <span class="number">1</span>   <span class="comment">'_下一系列值_</span></div><div class="line">   <span class="keyword">Next</span></div><div class="line"></div><div class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></div></pre></td></tr></table></figure><p>大概写了一下注释说明，我也不太会写 VBA，不过看个大概意思还是没问题的。</p><p>好了，接下来保存代码，保存的时候会提示普通的 .xlsx 格式不支持宏运行，所以保存为 .xlsm 的格式，这样就可以支持宏运行了。</p><p>最后选中我们的图表（一定要选中才有目标对象），运行宏。</p><p><img src="http://image.tubbodetang.site/tricks_3_3.png" alt=""></p><p>然后就看到，酷炫的结果出现了。那张散点图里的 2000 多条数据，全部被提取出来了，这样就可以根据数据去重新拟合一个曲线了。</p><p><img src="http://image.tubbodetang.site/tricks_3_4.png" alt=""></p><p>是不是还挺强大的，能做到一些基础功能做不到或者想都不敢想的事。</p><p>更牛逼的是，一旦写好一段程序之后，其他的文件也都可以通用，这样的话，处理百八十个相同需求的文档，就都不在话下了。</p><p>好了，今天的程序员偷懒技能就分享到这里。不知道下次还会遇到什么奇葩需求，也不知道下次还要过多久，遇到的时候，我们再见咯。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些开心事</title>
      <link href="/posts/42741/"/>
      <url>/posts/42741/</url>
      
        <content type="html"><![CDATA[<h3 id="一些开心事"><a href="#一些开心事" class="headerlink" title="一些开心事"></a>一些开心事</h3><p>最近有几个值得开心的事情，值得记录。</p><p>第一是我这几年里最重要的一件事，也是压制我最多的一件事，终于完成了还是有点小成就感的，那就是，我终于收到了研究生的录取通知书了。</p><p><img src="http://image.tubbodetang.site/happythins_1.jpg" alt=""></p><p>拿到通知书的那天正好是父亲节，我妈也刚好来北京。现在工作学习都比较忙，离家远，一年才能回去一次。虽说也期待父母有自己丰富的退休或者业余生活，但无论如何到了这个年纪，他们心里最牵挂的还是自己的孩子。所以第一时间和家人分享自己的喜悦，让他们放心，也是一件开心的事情。</p><p>不过就像我以前说过的，这只是人生的很小的一部分，也仅仅是一个开始。不久之后我就要开学了，那个时候要边工作边学习，一定会更忙，也是更大的挑战，所以并不能仅仅因为拿到一个入场券就松懈，后面的事情和后面的生活，一定会更加的精彩。</p><p>还有就是，今年考研之前我给自己许诺，如果考上了，就买一套新款的 iPad Pro 给自己。不过因为 Pro 的价格，我迟迟没有下手，虽然说也不是买不起，但还是觉得奢侈了点，怕自己买回来就是吃土的，还不如买一个 MBP 。现在录取通知已经收到了，刚好前两天又是 618 ，也有一定的优惠，所以经过一番比对查找，终于还是忍不住剁手了——剁了 iPad Air 3 + 键盘 +笔。</p><p><img src="http://image.tubbodetang.site/happythins_2.jpg" alt=""></p><p>此处真要感谢苹果把更好的功能扩展到了更低价位的产品上（当然同时也是苹果为自身发展清库存的考虑）。虽然 iPad Air 3 和 Pro 相比没有四扬声器也没有更高级的视频处理效果，但这些功能我暂时都不需要。我只是偶尔涂个鸦，画个草图之类的，更多的是想用 iPad 来做一些简单的文字性工作，我想新的 iPad Air 已经绰绰有余了（颜值党此处还是要感慨一句还是全面屏的 Pro 更硬朗更得我心，唉，谁让咱穷呢）。</p><p>这一套下来，差一点点 5k，尽管比 Pro 已经便宜了不少，但还是有那么一点点肉疼的。只能更努力的物尽其用了。以后周末去上课，平时下班做笔记码字，我都打算用 iPad 了，真·生产力工具。后面使用发现了好的应用和使用方案，也会写个文来总结的。</p><p>当然啦，最近也依然在持续行动者的道路上奋斗，争取每天都写日课总结自己的生活和工作学习，也争取每天都能做出一点点进步。有的人是通过坚持 1000 天连续写作来见证自己持续行动的道路的，我也开始坚持每天都写点东西了，现在写作的速度比去年刚开始的时候已经快了不少，不过自认为水平还不到家，为了能写出更多有价值的东西，而不仅仅是自己的碎碎念，我还在持续充电。</p><p>继续干。</p><p>————————————<br>此文就是用<br>iPad +<br>Smart Keyboard +<br>小鹤双拼写的。<br>流畅，爽。</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又一次告别</title>
      <link href="/posts/52716/"/>
      <url>/posts/52716/</url>
      
        <content type="html"><![CDATA[<h3 id="又一次告别"><a href="#又一次告别" class="headerlink" title="又一次告别"></a>又一次告别</h3><p>今天早上五点半起的，从学完车就没那么早起过了。其实起来之后比平时起得晚要精神很多，毕竟夏天，天亮的早，也比较热，基本睡不太好，晚起也经常只是在床上赖着而已。</p><p>起这么早是因为要送老妈离开了，老妈这次来呆了三周，她说想在去南方办事之前来看看我，于是我邀请她来陪我一起过端午节。</p><p>现在在北京虽然还是漂着，但是毕竟也有了自己的生活，如果说以前住的都是出租屋，那现在和好友整租，也算有个家了。美中不足的是，房子太小，不方便让老妈一起住，所以这次在附近给老妈找了个短租房，短租房的二房东年纪比我都小，不得不感慨下，别人的经济头脑。</p><p>这样和老妈相处的时间就更短了，工作日有时候连晚饭都不能一起吃，基本就只能下班后陪老妈散个步，没能匀出更多的时间陪伴，终究也是有点遗憾的。所以周末只好加倍偿还工作日的时间，这几周的周末基本都在陪老妈了，出去逛逛街，会会远房亲戚，最有意义的可能就是一起出去听了一场相声。老妈说，比看电视上的相声有意思多了。</p><p>老妈有个讲究就是：出门的饺子进门的面。进门的面经常不那么重视，出门的饺子是一定重视的，虽然说我不爱吃饺子，但每次从家出来前的最后一顿都是饺子，吃得我那叫一个顶……</p><p>老妈要出门去南方了，所以昨晚我也按她的规矩，带她去吃了顿饺子。饺子挺好吃，但就是稍微有点贵，老妈吃完还在和老爸吐槽说这边的物价，然后老爸就回了三个字：好价格。</p><p>记得有一本书里写「人是被各种各样的离别磨损的」，看后深觉如是，因为我也是个挺害怕离别的人。我常常觉得相见不如怀念，如果相见之后不久还要分别，那还不如不要相见。</p><p>那种相见时就在心里惦记着过几天就要分开的不安全感，以及几天后仿佛习惯但忽然又被抽离的空虚感，经常折磨着我。做一个今朝有酒今朝醉，时时刻刻享受当下的人，真的很难。</p><p>人生本就不长，而互相陪伴的时间就更短了，小的时候，父母奋斗不能陪伴我长大，现在父母老了，轮到我奋斗，亦不能陪伴他们变老。</p><p>更可怕的是，父母和我们之间的感情，有时候才是这世界上最不计回报最无私的感情。虽表达的方式有时粗劣鄙拙，且在拥有时又往往来不及珍惜，让彼此更加痛苦……</p><p>老妈常说她子欲养而亲不在的深深遗憾，我也不想重蹈覆辙，只能尽我所能，不给自己留有遗憾。</p><p>最后，希望老妈给我带来的一个早起的开头能坚持下去，毕竟，早上写文的效率真的不错，觉得今天早上白白赚了两个多小时的时间做自己的事情，真好。</p><p>————————————<br>遥祝老妈此行一路顺利。</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走在持续行动的路上</title>
      <link href="/posts/24877/"/>
      <url>/posts/24877/</url>
      
        <content type="html"><![CDATA[<h3 id="走在持续行动的路上"><a href="#走在持续行动的路上" class="headerlink" title="走在持续行动的路上"></a>走在持续行动的路上</h3><p>如果考研终于在多年之后成功是一个阶段的结束，那最近的我，就是拼了命在追回这几年里为了准备考试而牺牲的做其他事的时间，这也是一个全新的开始。</p><p>几个月前，我看了「曾国藩传」并开始了我的日课计划。一直到现在日课也写了快有三个月了。我把它发在了我的个人博客上面，为了不影响博客的主要内容，还把博客的框架重新调整了一下，把日课都放在了第二页，从主要文章的时间流里剥离了出来。</p><p>今天我想整理一下自己在写日课的三个月里发生的改变，也是对这段时间的复盘，以便能更好的继续下去。</p><p>在日课中，我会对当天做过的事情做一个大致的记录。如果有特别需要自己注意和反思的地方，我也会把自己的体会记录下来。如此就使不少以前发生在身边却视而不见的值得学习体会的事情，真的转化成了一种可以看得见的体会。虽然这样做短期内看不到特别大的效果，但这些体会在我又遇到相同的情况的时候，就会在大脑里不断出现，提醒我应该如何处理得更好。</p><p>日课还是一个检验自己当日任务是否按时完成的场所，我会在日课里写上今天是否完成了昨天说过要做的事，以及第二天要做什么事情。如果当日没有完成昨日计划要做的事，问题又出在哪里，应该怎么去调整。</p><p>说心里话，可能是年纪大了，不像以前做学生的时候，事情比较少，每天只要学习就可以了，而且记忆力好像也是巅峰状态，很少做什么记录和规划，事情也能安排的比较明白。那时候我甚至还有些看不起动不动就要列个单子整理要做的事情的人，觉得他们的记性也太差了。而现在不仅要生活、还要工作，更要持续学习进步，每天要做的事情太多，不把计划要做的事情和做的过程、结果记录一下，就会仿佛失忆一般。只靠脑子记我是记不住的，日课刚好能起到一个记录的作用。</p><p>记日课以来，我已经养成了一部分好的习惯，比如每天的阅读和英语学习，身体允许的时候还会做一些锻炼，这些在日课中断的时候我也没有停下来去做。说明每天检查自己的任务是否完成，是可以督促自己达成目标、帮助我们逐渐培养起习惯的。</p><p>经过这三个月，坚持每天阅读，我已经读了之前几年不可想象数量的书——7本，这还是有一些书看了一半，没算在内的结果。</p><p>但很惭愧的是，就像上面提到的，我的日课，有坚持的时候，也有中断的时候，暂时还没能做到日日记录，下面这个图里有（补）的，都是我后来补上的。这直接说明，坚持是非常难的一件事，尤其是做这件事并不会给你带来即时的满足感、成就感的时候。如果能做到坚持行动，就已经战胜了自己和世界上大多数只说不做的人了。</p><p><img src="http://image.tubbodetang.site/keepMoving.jpg" alt=""></p><p>我的日课经常中断在假期、或者有突发的疾病和特别忙碌的时候，而且一旦中断，就会连续中断好几天，然后才能重新鼓起勇气再继续下去，继续了几天之后一旦遇到周末，又会断掉。（上图你可以看到有几个日课从时间跨度上基本上算是周课了，而且发生的频率越来越高……）这也给了我提示，一旦开始就千万不要中断，否则只会前功尽弃，重新开始意味着打击自己的自信，你将会面对比最开始更大的阻力。正所谓，一鼓作气，再而衰，三而竭。</p><p>最近这几天，正好在读「刻意学习」这本书，里面提到了持续行动这个概念。看后颇为感同身受，我们大多数人，都避免不了人性的弱点，总会在持续、坚持的路上轻易放弃。但如果真的做到持续行动，以三年、五年、十年、三十年为跨度，做好坐冷板凳的心理准备，一切或许都正在发生改变。</p><p>现在的我，只是一个在持续行动路上刚开始学爬着走的小孩，经常发生中断的情况，意志还不够坚定。但经过不断的复盘，总结，我相信自己正在逐渐成为一个持续行动者。</p><p>————————————<br>走在持续行动的路上，<br>让时间说话，<br>见证自己的成长。</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又见套路…</title>
      <link href="/posts/18239/"/>
      <url>/posts/18239/</url>
      
        <content type="html"><![CDATA[<h3 id="又见套路…"><a href="#又见套路…" class="headerlink" title="又见套路…"></a>又见套路…</h3><p>周末去剪头发了，理发店本就是一个有意思的地方，和剪头发的、洗头的聊天都能获知很多奇妙的事情。而这次我遇到的一个小细节更让我惊奇……</p><p>因为平时去的店在装修，所以换了另一家，虽然两家是同品牌的连锁店，但一进门我就发现这店和平时去的那家有点不一样，套路有点多。</p><p>引导员领我们进店之后报剪头发的价格，是从 120 开始报的，逐级递加，最后才说了最便宜的 78。</p><p>这个过程中他的语速还挺快，不仔细听的确听不清楚。同去的人就没仔细听，以为 120 就是最低价了，然后就说剪 120 的。而我经常去，知道最便宜的是 78，才能听见他最后说的 78。（这里还有一个知识点就是再认比较容易）</p><p>同去的人还不信，叫小哥回来又说了一遍，果然还是最后说的 78 。</p><p>只能说现在理发店都把套路用到极致了。利用顾客不仔细听介绍的漏洞，就能把价格往上抬一抬。这和有些产品中的引导如出一辙，不管是故意还是无意（当然大部分肯定是故意），总有一部分用户会落入「圈套」，然后产品设计的目的就达到了。</p><p>而且现在理发店的服务也是极尽周到……让我有点联想到海底捞，进去之后把人伺候的服帖的，各种饮料果盘就不说了，下个台阶还扶着你，让我这种脸皮薄的人都有点不好意思。</p><p>剪头发的时候我就在想，生活处处都是套路，也处处都有值得我们学习的东西，只有做一个有心的人，才能从细节里发现有价值的东西并为自己所用。</p><p>不过这次套路让我记忆深刻的点还不止于此，这家店头发剪的是真差，完全不倾听客户需求，按着自己的意思剪，剪完了还拍照，合着把我当成发型模特了。</p><p>气哭了，剪的巨丑。今天上班被围观了半天，还好自信，呵呵。</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书 -「活出生命的意义」</title>
      <link href="/posts/20221/"/>
      <url>/posts/20221/</url>
      
        <content type="html"><![CDATA[<h3 id="读书-「活出生命的意义」"><a href="#读书-「活出生命的意义」" class="headerlink" title="读书 -「活出生命的意义」"></a>读书 -「活出生命的意义」</h3><p>今天补写前一段时间读的「活出生命的意义」的读书小笺。</p><p>这本书的作者是奥斯维辛集中营的幸存者，心理学家维克多 · 弗兰克尔，他一生最大的成就，就是开创了意义疗法。</p><p>书的前半部分结合作者在集中营的经历聊了聊意义疗法的背景，但没有描写很多痛苦的回忆，更多的是记录下在那种环境下，人性所能焕发出的别样光辉，而书的后半部分则简略地介绍了意义疗法。</p><p>其实读到这本书之前，我也常常在思考生命的意义，毕竟成年人的世界从没有好过一说。沮丧时常常觉得自己活的这么累是为了什么？</p><p>思考的结果要不就是无解：这个问题想了也没有意义。要不就是刻意的去安慰自己，认为自己每天所做的应该多少都有一点意义，要坚持，不要多想。</p><p>而看了这本书后，我的后一种想法某种程度上得到了印证。</p><p>即尽管苦难本身没有意义，但在苦难之中，哪怕觉得自己的境遇糟透了，人生的每一天也都是有意义的。尤其是如果你能从苦难中超脱出来，鼓起勇气接受苦难带来的挑战，回头再看看你自己独一无二的人生，你就真正战胜了苦难，找到了属于自己生命的意义。</p><p>正像那句话说的：一切打不倒我的，终将使我变得更强大。</p><p>我记得前年还是去年的时候，有在微博上看到一个小学老师发自己学生的一篇作文，那个学生的文章以别样的角度，解读了自己眼中的时间和沙漏。</p><p>文章的大意是，一般人看沙漏，都认为处在上半区的沙在不停流失，这意味着自己的时间或者生命也在每分每秒减少。而那名小学生更欣赏的另一种角度是：看看下半区，下半区的沙每分每秒都在增加，这其实就是我们在时间或者生命上的收获。</p><p>这也就意味着，其实不管我们面临什么样的境遇，人生的每一天都是属于我们自己的，别人无法复制，更无法体会到我们对于生命的别样感受。</p><p>我们已经做出的选择，已经经历过的事情，都成了结结实实的历史，无法改变，而这历史，就是我们的收获。所以生命本身就是意义。</p><p>除了印证了我自己对生命意义已有的一些模糊解释，给了自己坚持自己所想并更热情的拥抱自己人生的动力外，这本书唯一带给我新知识的地方就是关于意义疗法中「矛盾意向法」在治疗强迫症、焦虑症等领域的应用。</p><p>人们经常因为紧张或焦虑的情绪而非自觉的去做某件事，但一旦意识到做这件事是不应该的，从而又产生了紧张或焦虑的情绪，加剧了原先的症状，形成了死循环，而破除死循环的办法就是利用人的幽默感，对自己自嘲，用相反的愿望去破除焦虑。比如越是害怕睡不着，那你就干脆别想着睡觉。越是害怕写不好字，那你就干脆先别写好字，随便乱涂试试。</p><p>不过这已经比较偏向于心理学的内容了，我也只是能看个大概。</p><p>总的来说，这本书的内容不多，但值得人深思的话语很多，在失去对生活的希望，觉得迷惘的时候，都可以翻翻。</p><p>真·精神食粮。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书 - 「乔布斯传」</title>
      <link href="/posts/31895/"/>
      <url>/posts/31895/</url>
      
        <content type="html"><![CDATA[<h3 id="读书-「乔布斯传」"><a href="#读书-「乔布斯传」" class="headerlink" title="读书 - 「乔布斯传」"></a>读书 - 「乔布斯传」</h3><p>首先感慨一下自己前几年书读的太少，比如这一本好几年前的畅销书，我居然现在才来看，显得有点晚。</p><p>不过只要看了就不晚，至少没有一直纵容着自己的无知。从看完的那一刻开始，我对乔布斯和苹果，都有了一些新的认识。</p><p>我觉得我真正第一次记住乔布斯这个名字是在 iPhone 4 大火的时候，那个时候周围还有很多同学有用 iPod， iTouch 等等产品，课间娱乐，好不新潮。</p><p>但是看了书我才知道，乔布斯的成就远不止在智能手机和一些类似的娱乐消费产品上。</p><p>早在 70 年代，乔布斯就做了改变个人电脑行业的先锋。</p><p>从硬件成本和软件的盗版传播角度来说，在我小的时候还是微软的系统覆盖面更广，所以一开始我接触到电脑，只知道 Windows 系列操作系统及使用 Windows 系统的多个厂牌的电脑。</p><p>但其实从一开始，却是乔布斯等人推动了更接近普通用户的个人电脑行业发展，也是乔布斯等人第一个推动图形界面商业化，带给普通用户。而微软最开始只是帮苹果电脑做一些专用软件，后来才靠和 IBM 的合作，推广了 Windows 系列的图形操作系统。</p><p>一直以来，苹果在个人电脑行业与微软的斗争，就好像今日在移动设备上与谷歌安卓的斗争。</p><p>这是属于封闭系统和开放系统的斗争，究竟谁更胜一筹很难有定论，但不论如何，两者的共存和斗争，都让我们的世界变得更美好了。封闭系统提供了无与伦比的端到端用户体验，而开放系统也激发了更多开发者的创造力，带给了我们更多样的选择。</p><p>更不可思议的，是我小时候很爱看的动画电影「玩具总动员」，是乔布斯领导下的皮克斯与迪士尼合作完成的。后来皮克斯和迪士尼的一路相伴也缔造了更多的动画电影传奇。</p><p>关于这段历史，我一无所知，所以看到的时候不免震惊了。原来今日我们津津乐道的很多动画电影，如果没有乔布斯对艺术和技术融合的坚持，是不可能看到的，而乔布斯本人，也多少为动画电影行业，注入了新的东西。</p><p>如果说以上都是乔布斯早期的成就，那么乔布斯再度回归苹果后给世界带来的变化，就更让人熟悉又陌生了。因为我们就身在其中，从不觉察我们的生活居然因此发生了巨大的变化。</p><p>首先是 iPod 和 iTunes 的出现，改变了人们购买、收听音乐的方式，大跨度打破了当时乱七八糟的随身听市场，使音乐产业加速走向数字化。</p><p>其实直到今天，iPod + iTunes 的模式仍不过时，还是音乐产业发展的一个大方向，不同的是，iPod 在某些场景已经被智能手机所取代，而智能手机这一波浪潮，毫无疑问，其中的领头羊源于苹果自家的传奇产品—— iPhone。</p><p>iPhone 的出现，使得之前出现的一些类似掌上电脑的产品也黯然失色，它使手机能做更多的事情，包括听音乐、看视频、收发邮件、上网等等。加上 App Store 的加持，iPhone 上的内容更为精彩纷呈。</p><p>iPhone 迭代至今，已经和安卓智能手机一起，统治了我们的日常生活，不得不承认，我们身边到处都是低头族了。地铁里，要不就在看手机，要不就在看平板电脑—— iPad。</p><p>轻薄的电脑一直是人们所向往的，iPad 虽然刚出世时没那么完美，但它也潜移默化的改变了出版业，传统的纸媒渐渐的转化到了数字媒体，更不必说本来就已经数字化的视频等内容了。现如今，iPad Pro 系列已经使 iPad 成为一个更强大的生产力工具，可以想见不久的将来，Laptop 大概会完全被平板电脑取代了。</p><p>苹果为了让用户的各种设备无缝同步，还推出了 iCloud，现在天天听云同步这种概念，觉得没啥稀奇，但是这在当时也算一种非常大的进步了。</p><p>不过多年来，因为肾不够用，我离苹果产品最近的时候，可能就是在苹果零售店闲晃的时候。但没曾想，连商店的装修风格也是乔布斯亲自设计的。看了书之后我才注意到，的确用的是大块的完整玻璃，还有仿佛悬浮在空中的玻璃阶梯。</p><p>我没体验过 iPod + iTunes，当时上学还是在听盗版歌曲，用着小破 MP3。到了智能手机时代，也买不起苹果，做小米的用户很多年。不过这几年终于用自己工作赚的钱买了一些苹果的产品，使用过后才发现端到端和开放式的不同——体验确实美妙省心。</p><p>而乔布斯最伟大的成就，如他自己所希望的那样，是缔造了一个可以长久延续的苹果公司和苹果公司的内核精神。</p><p>如果不是苹果的坚持和存在，恐怕用户体验和想象力、创造力的重要性很难在短时间内提上日程。像 iPod、iPhone、iPad 这种连三岁小孩第一次拿到都能无障碍使用的产品也不会如此贴近我们的生活。</p><p>不过对于乔布斯本人，我只能说，天才不可复制，连他古怪的脾气和生活习惯也是。不过也正是这些让他变得比普通人更专注，更与众不同，更能做成普通人做不到的事。</p><p>除了以上一些刷新我认知的历史，这本书里还有几个我认为很重要的观点，是值得一直记住的：</p><h4 id="1"><a href="#1" class="headerlink" title="1/"></a>1/</h4><p> 好的工匠连柜子和栅栏的背面都会制作的很好，尽管那是看不见的地方</p><h4 id="2"><a href="#2" class="headerlink" title="2/"></a>2/</h4><p> 一次只优先做最重要的两三件事</p><h4 id="3"><a href="#3" class="headerlink" title="3/"></a>3/</h4><p> 一流选手喜欢和一流选手共事。</p><h4 id="4"><a href="#4" class="headerlink" title="4/"></a>4/</h4><p> 求知若饥，虚心若愚（Stay hungry，Stay foolish ）</p><p>一个人一生的细节很多，更多的东西还需要慢慢回味和学习，我想短短一篇读书小笺，肯定说不完对乔布斯的敬佩之情。</p><p>所以最后以乔布斯回归苹果公司后的第一支广告——「非同凡响」的广告词来结束这篇文章吧，这也是乔布斯传最后的一段，我觉得感人至深。</p><blockquote><p>致疯狂的人。<br>他们特立独行。他们桀骜不驯。<br>他们惹是生非。他们格格不入。<br>他们用与众不同的眼光看待事物。<br>他们不喜欢墨守成规。<br>他们也不愿安于现状。<br>你可以认同他们，反对他们，<br>颂扬或是诋毁他们，<br>但唯独不能漠视他们。<br>他们推动了人类向前迈进，<br>或许他们是别人眼中的疯子，<br>但他们却是我们眼中的天才。<br>因为只有那些疯狂到<br>以为自己能够改变世界的人，<br>才能真正改变世界。</p></blockquote><p>————————————<br>一不小心写了这么长……</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时刻记着把自己放在低位</title>
      <link href="/posts/59642/"/>
      <url>/posts/59642/</url>
      
        <content type="html"><![CDATA[<h3 id="时刻记着把自己放在低位"><a href="#时刻记着把自己放在低位" class="headerlink" title="时刻记着把自己放在低位"></a>时刻记着把自己放在低位</h3><p>今天早上起的早，看了一会曹大的文章，又鞭策了自己一下。</p><p>不夸张的说，曹大的话拳拳到肉，学到很多东西的同时，看得我脸上火辣辣的。</p><p>感觉应该收藏下来，定期就拿出来翻翻。因为人总是健忘的，看文的时候认识到自己的不足，没过多久就忘了，开始变得飘飘然起来。</p><p>曹大说关于心态不够谦虚的问题，相信很多人都有，我自己也是。</p><p>明明自己水平不高，每天只是碎片化的汲取一些知识，都是皮毛，但是还以为自己看到了很多，很容易变得自满，与其他人相处或交流的时候，也会不自觉的流露出来。现在想来，十分羞愧。</p><p>曹大说关于眼界不宽，看事情片面，净挑刺的问题，我也深有同感。</p><p>很多时候，挑别人毛病都特别简单，随便动动脑子就以为自己想明白了，但其实，不身在其中，并不知道其中的难处，自己去做，是否能做的比别人更好？除了动动嘴巴觉得这不好那不好，有没有真的动手去改变什么？</p><p>这就是自己的认知还不够，还不能完全理性的站在更高的高度，从身边的事情里真的学到东西并且去实践。</p><p>我有时候觉得自己已经做的不错了，能从哪怕我不太喜欢的人身上发现人家的长处，但仅止于此，绝不会抛开不喜欢的情绪而向人家学习这些我没有的长处。</p><p>或者我能比较理性不偏激的看待某些社会热点现象，但也仅止于此，至于更进一步的了解其中的关系脉络，我也绝对做不到。</p><p>所以今天特地把看曹大文章的想法记录下来，提醒自己时刻把自己放在低位，总结一下</p><h4 id="1"><a href="#1" class="headerlink" title="1/"></a>1/</h4><p> 多看看别人做的好的地方，而不是揪着别人做的差的地方。</p><h4 id="2"><a href="#2" class="headerlink" title="2/"></a>2/</h4><p> 让自己时刻保持空杯心态，多听听别人怎么说，多观察人家怎么做，有用就的吸收，身边的万物都是老师。</p><h4 id="3"><a href="#3" class="headerlink" title="3/"></a>3/</h4><p> 把自己的视野也放低些，放到自己的手上，不要眼高手低，行动上是个矮子，视野再高，只能吹吹牛逼，不是真的牛逼。</p><h4 id="4"><a href="#4" class="headerlink" title="4/"></a>4/</h4><p> 最重要的是，以上几点不是今天、此时此刻意识到就完了，以后该怎么样还怎么样，最好经常拿出来温习一下，争取做到潜移默化的把这个概念记在脑子里，有意识的去做。</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下我的考研路</title>
      <link href="/posts/56092/"/>
      <url>/posts/56092/</url>
      
        <content type="html"><![CDATA[<h4 id="记录一下我的考研路"><a href="#记录一下我的考研路" class="headerlink" title="记录一下我的考研路"></a>记录一下我的考研路</h4><p>首先特别惭愧地说，这篇不是来讲什么高分上岸之类的经验分享的，因为研究生，我考了四次，最后在今年这次还经历了据说是史上最难调剂的调剂过程，才算是勉强考上了，而且最后只是一个非全日制的研究生。</p><p>相比很多学霸们高分一次性上岸名校的经历，我的经验可能更多的在选择和内心的挣扎上了，希望能给不知道为什么考研，到底考什么研，和内心如曾经的我一样摇摆不定的同学们一点点参考吧。</p><p>我认为我的四次考研主要分为两个阶段，第一个阶段是不知道自己要什么，随波逐流地参加了考试的阶段。</p><p>第一次考是在大四，考本校本专业（控制科学工程）。当时自己完全不明白为什么要考研，或者说考研能给自己带来什么，但也不知道毕业了之后要做什么工作，整个人都很迷茫。</p><p>但是考研看起来好像是一个缓兵之计，既让大家看到我好像在努力的姿态，缓和了家里人关于毕业后去向的逼问，也缓和了毕业就要进入社会，却不知道外面的世界究竟是什么样的慌张。而且身边的同学不是实习找工作就是考研。当时很傻，完全不知道自己出去能做什么工作，也不想去实习，而反正考研之后还有春招，所以我就打算先考研看看。</p><p>但其实经过四年的学习，我对完全通过考试来检验一个人能力的方式还是很厌烦（虽然心里也明白这就是这个世界的规则），对本校的本专业也不是特别喜欢了，所以整个复习阶段我都是今天鼓起勇气看会书，明天就会觉得自己做的毫无意义也坚持不下去。复习时我看的最多的其实是政治书，因为其他的书我都看不下去，或者是带着很痛苦的情绪去逼着自己看的，内心很抵触。</p><p>在这种情绪下学习，虽然没有中途放弃，但自然结果也不会太好。不过这段经历至少让我明白了一点：这种过程我再也不想来第二次了，我不会再考一个我根本不喜欢的方向。所以我就硬起头皮开始找工作。</p><p>非常幸运的是，我很快就找到了一个做前端开发的工作。虽然之前也有面试一些别的工作岗位，但只有前端开发的这份工作，好像有魔力一般的吸引着我，我几乎是没经过什么斟酌就立刻答应了去实习。</p><p>在实习的过程里每天都成倍的学习到大学四年都学不到的知识，那感觉简直爽呆了。工作的第一年我完全沉浸在技术学习给我带来的成就感和喜悦里。从仅仅有一点大学 C 语言的编程基础，到在项目里独当一面，追上团队里前辈的脚步，甚至在某些方面超越他们，自己的成长也挺快。</p><p>工作渐渐稳定下来之后，我又想起了自己的艺术梦——做和设计有关的工作。</p><p>其实当时决定去面试前端开发岗，就是看到这个工作可能会做网页（我当时都不知道啥叫前端开发），而我当时以为做网页可能就能做和设计相关的工作了。不过也没让我失望，因为所在团队不大，所以我还经常能接触到一点设计、流程、或者交互、用户体验方面的内容，而这正是我喜欢的。</p><p>每个人生命中可能都有一些绕不开的东西，我的家人们始终希望学历越高越好，而且的确在工作和生活中我也发现了一点点学历带来的瓶颈。毕竟不是每个人都能做没有学历就逆袭的大佬，而我也的的确确就是一个甚至还有点内向的普通人，和一些善于展示自己能力的人相比，真的没啥竞争力。所以我又开始寻觅一些自己喜欢的专业和学校的信息。</p><p>到这个阶段，我已经是知道自己想要什么才去考研的了，我想要找一个适合自己，自己喜欢还能和工作有一些交集的专业。</p><p>经过一番不是特别认真的查找（只是机缘巧合发现了一个合适的之后，我也没去了解过其他学校的类似专业或者整个国内这个专业的行情），我最后直接把目标定在了清华美院的交叉学科（交互设计）。</p><p>现在回想起来这个学校选的也是有点草率，可能每个人心里都有个清华梦吧，一看到清华就什么都没管决定坚持去考了。但经过这么多年，其实国内这个专业的情况已经有了一些变化，还有其他更好考一些的学校可供选择，所以这其实是一个择校上的盲目。</p><p>不过我没有辞职去考研，因为前端开发的工作不仅给我带来了很多知识，很多动力，很多新的东西，更重要的是带给了我一份稳定的收入，让我能有底气做一些自己喜欢的事，而不是父母希望我去做的事。</p><p>虽然这样少了别人故事里破釜沉舟的部分，也让我的复习时间不够充裕，最后考了好几年才有了一点成果，但我个人觉得没有辞职考研可能是我选择考清华之后最正确的选择了。清华还是很难考的，我自己也担心就算全职复习也考不上，只是在不断的尝试罢了。（不要脸的又给自己留了一下后路</p><p>而这一尝试就尝试了三年。</p><p>第一年真的不确定自己能不能行，完全是抱着试试的态度去踩点的，几乎没怎么复习我就去了，最后发现考的比考本校本专业还好一点，这给了我一些信心，不过这无疑也浪费了一年的机会。</p><p>于是第二年早早就开始认真复习，结果这属于用力过猛，战线拉的太长，到了真正重要的考试前两三个月，我已经进入到了疲软状态，而且这一年公司也经历了一些动荡，心里很不平静，又有一些究竟是努力工作争取工资更上一层楼还是分精力去考研的挣扎，看不进去书了，所以第二年也差几分没过国家线。</p><p>不过庆幸的是这两年虽然也有过浮躁的时候，但是工作中接触到的一些新知识，新认知（很多都是从关注的公众号大佬那里学的），一直在鼓励我前进。然后其实我并没有把全部的精力都放在一个地方，我也学习了很多别的知识，包括怎么提升执行力，睡后收入，个人品牌的打造等等等等，一直也都在默默做一些积累。</p><p>为了转换心情，去年我一直到八月才开始复习，八月之前的几个月利用周末时间去考了驾照。虽然做了很多和考研无关的事，但是做的事情越多心里反而越平静。去年的复习主要放在做题上，我坚持做了很多以前浮躁的时候都不会去做的事情，比如重新写一些基础类，然后去 leetcode 上刷题这些。</p><p>最后虽然没有考上清华，但是经过了三年我还是依然保持着进步。这次过了国家线，所以也就走上了调剂的道路。在调剂中也是因为有编程和实际工作的经验，在复试里小逆袭了一下。其实研究生阶段，老师都喜欢能直接帮忙干活的学生，所以不要觉得自己初试分比较高就松懈，当然了，特别高的分数还是吃香的。</p><p>都说调剂掉层皮，经历过之后才发现这话不假。首先全国一堆学校有没有你能去的专业都要你自己一个一个在短时间内查找了解联系，这个就很费精力，仅在这个阶段我就无数次想放弃。</p><p>而进一步的，调剂过程中希望的一次次破灭，一次次被别人拒绝，都在一点点打击着你的自信。而你的命运好像完全掌握在别人手中，你不知道你遍布全国的对手究竟是什么情况，也不知道学校招生的具体情况。只能一点点去问，去硬着头皮，厚着脸皮一次次抠出一点点对自己有用的信息。因为你和学校的信息是不对称的，你只能放低姿态，接受别人对你的挑选。</p><p>调剂的这两个月可以说比自己一个人单打独斗准备考试要辛苦的多。因为需要提前联系一些老师才能更有把握一些，所以还要面对很多人际关系处理的问题。这对往常比较内向的我来说其实是一个挺大的挑战的。不过好在我都努力鼓起勇气坚持过来了。</p><p>坚持过来之后我反而很感谢这个调剂的过程，因为经过这次，我在一定程度上也进一步克服了自己比较不善于和人打交道的问题。算是迈过了一道自己心里的坎儿。</p><p>当经历过这么多或错误或正确的选择和四年的波折之后，真的被一个自己喜欢的专业所接受，而且学习方式也是我更喜欢一些的非全日制，也算是一个很好的结果了。</p><p>上面扯了一堆我的真实经历，希望你们能从中发现对你们有价值的东西。</p><p>如果要我总结一下，我想我最想告诉你们的可能是：</p><h4 id="1"><a href="#1" class="headerlink" title="1/"></a>1/</h4><p> 现在研究生也某种程度上的扩招了，而且非全日制也在前几年获得了几乎与以前的双证硕士平起平坐的地位，想读研究生的话可以说选择更多了一些，不过含金量也和以前的本科生一样在降低，要不要考研，大家就自己斟酌吧。</p><h4 id="2"><a href="#2" class="headerlink" title="2/"></a>2/</h4><p> 其实我挺羡慕现在很多还在上大学的弟弟妹妹们，移动互联网的普及和知识付费慢慢发展起来以后你们接触到高质内容和信息的机会更多了，学习的资料和资源也比以前更多。如果能全部都利用起来，真的是一个很好的比别人领先的机会。我经常在星球里看到一些还在上大学的弟弟妹妹们已经做出了很多成就，我觉得他们也是我学习的榜样，资源给你了，去不去用，能不能用好，就是自己的能力了。</p><h4 id="3"><a href="#3" class="headerlink" title="3/"></a>3/</h4><p>千万不要做你不知道为什么要去做的事，否则你在做的时候就会怀疑自己的动机，也做不好整件事情。就算侥幸成功，你也不会特别开心。就像我最开始只是随波逐流觉得应该和大家一样选择考研一样。</p><h4 id="4"><a href="#4" class="headerlink" title="4/"></a>4/</h4><p> 如果读研是为了学到东西，而你不能去到一个真正能教会你很多东西（不管是知识还是处世）的导师名下进行研究生学习，那么工作中学到的东西无疑会更多。</p><h4 id="5"><a href="#5" class="headerlink" title="5/"></a>5/</h4><p>如果决定了要考研，一定要在考研之前就对整个国内这个专业的情况做一个详细的了解（相当于把调剂中查找什么学校能调这一步放到考研之前就去做），最后选一个最适合自己的，最有可能初试直接上岸的学校。（不要像我一样盲目选了一个不切实际的学校，到了调剂时才手忙脚乱的去了解其他的学校）因为调剂真的很难，尤其是现在研究生也在扩招，考研人数暴增，而现在的弟弟妹妹们给我的感觉是分数都能考的都特别高的情况下。初试上岸无疑是巨大的优势，哪怕你复试被刷，重新调剂一志愿的非全都比外来户有优势。</p><h4 id="6"><a href="#6" class="headerlink" title="6/"></a>6/</h4><p>最后就是坚持了，知道自己为什么做，要做什么之后，真的就是坚持去做，没有别的了，就是干。</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书 - 「曾国藩传」</title>
      <link href="/posts/6014/"/>
      <url>/posts/6014/</url>
      
        <content type="html"><![CDATA[<h3 id="读书-「曾国藩传」"><a href="#读书-「曾国藩传」" class="headerlink" title="读书 - 「曾国藩传」"></a>读书 - 「曾国藩传」</h3><p>以前家中就有「曾国藩家书」一套，并且也对曾国藩其名略有耳闻，但我固执的坚持自己对晚清官场的偏见，一竿子打死，认为没有什么好看的，所以迟迟没有了解过那一段历史。</p><p>果然不出意外，书一翻开，就啪啪打脸了我之前对他的偏见。</p><p>一开始，我以为能在那种乱世的腐朽朝廷里做大官的，无非是一些精于权术、善于谄媚的人，没想到曾国藩偏偏不是这样的人，他不仅出身低微，天资也不如大多数科举高中的人那般聪慧，甚至在官居高位的时候，都常常被自己的学生或亲手提携起来的聪明人“鄙视”。</p><h4 id="关于自律"><a href="#关于自律" class="headerlink" title="关于自律"></a>关于自律</h4><p>知道自己天资不好，他就靠勤奋来补，对自己的要求非常之严格，直到去世的那天早晨，他还坚持完成自己给自己定下的任务，一日不放松。</p><p>他从祖父那里学到了倔强坚韧，自从立了要做圣贤的大志，他就开始写日记，监督自己完成每日已定计划的同时，不断总结反思自己每日所做所为是否有悖圣贤的教导。细致程度甚至到每天说了什么不该说的话。可以说，志存高远，他做到了，脚踏实地，他做的更是比平常人都出众。</p><h4 id="关于交际"><a href="#关于交际" class="headerlink" title="关于交际"></a>关于交际</h4><p>他重视交友，交的都是有识之士，还急公好义，经常帮助朋友。同时还经常提携朋友，向朝廷推荐他觉得有能力的人，以为国家培养人才为己任。后来在朝中做官的很多都是他以前的学生、幕僚。其中不乏左宗棠、李鸿章等重要大员。</p><p>他和人打交道，遵从的是君子之道，待人以诚，哪怕和自己有分歧，或者暗地里算计自己的人，他也不用小人的手段报复。</p><p>在官场里，一开始他还时常犯直脾气的毛病，总爱顶撞皇帝，一旦自己有了主意就不听其他人的意见，也打心底瞧不起地方上苟且不作为的官员，不愿与他们沆瀣一气。但在经历了人生的起起伏伏之后，他也能对此有所反思，后来为官做事，在坚持自己君子之道的基础上，圆润了许多，事事站在别人的角度多多思考，渐渐的，才能在官场里立稳脚跟去施展自己的抱负，这其实是有大智慧的。</p><h4 id="关于做事"><a href="#关于做事" class="headerlink" title="关于做事"></a>关于做事</h4><p>他做事踏踏实实，不留死角。不论是带兵打仗还是官场活动，事事他都贯彻着自己的一套“笨办法”，用笨人的思维，一点一点的磨，一点一点的钻。仔细思考看清全局之后，遇到难处就坚持不懈，如若失败了，就认认真真的反思自己，反向思考失败的关键所在。</p><h4 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h4><p>学习上，虽然是儒家，醉心理学，但他的心态不像其他人那般闭塞，读书也不是死读，更注重实用。他对事物有自己的判断，发现自己的不足之后，能用包容的心态，去改变自己，学习先进的、好的东西。万万没想到，洋务运动和清廷派出的第一批公费留学生，都是他及他的幕僚慢慢推动的。</p><h4 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h4><p>读了前人的奋斗史，也是对自己的一份激励，对于曾国藩本人来说，虽然他的一生由于生不逢时最终没能实现自己救国救民于水火的抱负。但他追求理想的一生，却给我们留下了很多精神财富，的确如书中所说，他是中国传统文化的最后一位偶像。<br>总结一下，成就曾国藩的，无非是以下几点：</p><ul><li>对自己的严格要求</li><li>孜孜不倦的学习</li><li>反思与总结</li><li>不怕挫折，越挫越坚</li></ul><p>这几点普通的不能再普通，几乎人人都懂，但就是这样简单的道理，最后形成了水滴石穿的效果。</p><p>我自己也不是什么聪慧之人，但在勤奋和对自己的要求之严格等方面却不及他的几十分之一。很多时候，真的是大道理都懂，但就是找了各种借口不能做到。</p><p>不过既然已经有人能做到，并且还做的很好，就说明懒惰也并非不能战胜。缺的只是那一点做出改变的勇气罢了。</p><p>所幸改变已经开始发生。在读完他写日记一节后，我已经决定开始用同样的方式来监督自己了。每天写一个小的总结，到今天，已经有五天了，我认为效果还不错。</p><p>人的一生好像一本书，读好的书，向好的人学习，日日修正自己，终会有所得。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于日课的计划</title>
      <link href="/posts/48464/"/>
      <url>/posts/48464/</url>
      
        <content type="html"><![CDATA[<p>最近在读「曾国藩传」，其中有一个特别引起我注意的地方：</p><p>曾国藩为了自己做一个圣人的志向，向别人求学方法，最后得到了一个看似十分笨拙的方法：决定每日写日课反思自己。</p><p>什么是日课呢？</p><p>就是今日干了什么，规定的任务是否完成，做错了什么，该怎么做，算是一个小的总结。</p><p>日课也不必很长，短的不过百字，但必要的反思时一定要有的。</p><p>这给了我很大的启发，因为我常想做人做事要在这个世界上留下痕迹，哪怕不为别人看，也要让自己的经历不白白的过去，这才算一生过的有意义。</p><p>刚实习的时候，每天是要给领导发一个文档汇报今日学习了什么，有哪些进步的，现在翻回去看那时的自己，也觉得很有朝气，没有白白浪费时间。</p><p>比起工作了许多年的现在，虽然能力确实比以前提高了不少，但日日记录的习惯却因为懒，或者忙的借口丢掉了。</p><p>近几年工作里写年终总结的时候，常常感觉记不起自己一年里做了什么，每天获得了进步没有。有时候今年做的事情，我感觉仿佛好几年前做的一样，记忆的时间线非常的凌乱。</p><p>开始写公众号以后，这样的情况稍稍好了一些（因为我会整理自己所学变成笔记以便日后分享或者使用），不过还是只能记得一些大事，很多零碎的小事还是无法记起。</p><p>所以我决定也学习前人这个方法，每天写一个简短的总结，来记录一下今日的得失，毕竟时间一长，今天发生了什么就会被遗忘。</p><p>很多事情都是以小见大，屡屡放过小节的人，最后也会在大事上吃亏吧。</p><p>而且看似只有百字，日日坚持，实际也是一个很大的挑战。</p><p>我知道有很多很厉害的号主，日日坚持分享输出，我暂时还没有那么多干货，只能先从日课开始，监督自己学习和积累了。</p><p>但这样的日课很可能没什么营养，只能是自己留看学习的对象，所以我不会把它发在公众号上。公众号还是会继续分享更有价值的东西给大家。</p><p>日课我会发在个人博客上，刚好因为写公众号，我的博客很少再更文了，写写简单的总结，也不至于荒废。</p><hr><p>那么接下来就是今日份总结：</p><p>今天看了一小时「曾国藩传」，晚上做了运动，公众号发文一篇，关于写日课的。</p><p>其次还继续查找总结了调剂的一些学校，但是可用的不多。</p><p>工作上，今天做了项目测试，虽然比开发容易，但是反而更累，什么时候能有更好的办法做测试呢？</p><p>今天还被领导说做事不分重点，虽然有一定道理，但我也有我的委屈，不过想一想虽然其中有各种原因纠葛，至少领导说这话的当时还是自己做的有问题，工作中显得不够积极主动，刚巧被领导发现，还是要踏实努力工作。</p><p>今天因为工作在知识星球的冲动提问也被删帖了，怪我自己的提问没有营养，所以以后发帖还是得注意些，多多积累自己的信用，不发没用的东西。</p><p>今天在与人多说话这一点上做的还不够充分，停留在老样子。</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于双拼那些事</title>
      <link href="/posts/21821/"/>
      <url>/posts/21821/</url>
      
        <content type="html"><![CDATA[<h3 id="关于双拼那些事"><a href="#关于双拼那些事" class="headerlink" title="关于双拼那些事"></a>关于双拼那些事</h3><p>先说明一下，这篇文不是双拼的教程，而是我最近一段时间学习和使用双拼的体验，如果看了文章也想用双拼，建议搜索小鹤双拼学习即可。如果你本来想学双拼，看了我的文章之后不想学了……我只想说：别，别走……</p><p>好，下面进入正题。</p><p>从接触打字以来我都是用全拼的，双拼在我的认识里一直只是在切换输入法时被跳过的一个选项。毕竟键盘摸熟了之后，在对打字速度没有特别高要求的情况下，全拼已经可以满足日常所需了。</p><p>所以我之前对双拼的态度和五笔什么的是一样的，一样是打字，为啥我还要花时间去学个看起来很复杂的方式呢？</p><p>直到 17 年年末，我在少数派年度获奖文里看到有人安利双拼，而且那文的支持率还挺高，说能提高打字效率，爱折腾的我就起了好奇心，不过看到要记忆键位，这事又放下了。</p><p>后来一直关注的一个大佬也说他写文用双拼写起来很爽，这次我就更动心了，想着有空我也试一下。</p><p>这一想就想到了 18 年 12 月的最后几天，刚好周围弥漫着元旦的气氛，工作也不是很紧，我就想在假期三天里拿下双拼，以后码字就更有效率了。</p><p>事实证明，我高估了自己。</p><p>在网上搜了一圈双拼的键位映射，以及怎么设置双拼模式之后，我就开始摸索着练习了，不过练习的效果嘛，只能说感觉到现在有两个月了（除去过年在家基本没怎么打字），我才刚刚能恢复到我全拼打字的速度……</p><p>这告诉我们，练习双拼，还是需要时间的，三天拿下的想法真是太幼稚了……</p><p>扯了这么多，在熟练度还远远不够的前提下，双拼给我的感觉是这样的：</p><p>学习成本还是有的（不过至少比五笔好多了），需要肌肉形成记忆，是个慢功夫。而且一旦用了一段时间，肌肉有了一定记忆之后，再想回全拼打字，你会发现全拼也回不去了……非常尴尬。</p><p>同时发现了几个会产生困扰的缺点：</p><ol><li>长句打错的时候因为没有像全拼一样明显的音节，很难定位打错的地方返回去修改，所以目前我打的大多是短句。</li><li>如果有人用你的机器打字，而你设置了只用双拼（为了熟练掌握最好这样设置），而不是全双混用，那这个人可能会把你骂一顿。</li><li>对于我这种野路子打字手型不是特别友好，还在摸索中。</li><li>对于前后鼻音不分的人也不是太友好。</li></ol><p>当然了，这几个缺点应该都会随着自己熟练度上来之后而慢慢消失的。</p><p>说打字会变快我现在还没体会到，不过从目前打字偶尔坑坑巴巴都能勉强赶上我原先的全拼速度来看，未来很大概率会超越以前全拼的速度。</p><p>目前给我好的印象是：</p><ol><li>打字变得很省力，打同样多的字，需要敲击的次数大大缩减了，不会觉得手累，写长文也没问题了，这简直是腱鞘炎福音啊朋友们。</li><li>由于敲击次数的缩减，思路和手基本能同步了，这样码字的时候确实流畅了非常非常非常多，很少因为敲字或者找字的时间打断自己的思路。这有点类似于速记，两个符号代替了一堆笔画。</li><li>打字的声音小了很多，有特殊的节奏感，不再是以前噼里啪啦，老板一听就是没在写代码而是在聊天那样了。</li></ol><p>现在小鹤双拼优化的还是不错的，苹果和安卓也都支持，手机打字屏幕小本来错误率就高，少按键就意味着少出错，我现在已经逐步在移动设备上也开始使用双拼了，之前是只在电脑上用。</p><p>所以本文多少算是一个安利吧，同时写写自己的爬坑历程，给有兴趣的人一个参考。</p><p>————————————<br>配合 Thinkpad 的键盘，<br>确实打字容易上瘾，<br>我更新速度都变快了：)</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么立 Flag 才不会倒？</title>
      <link href="/posts/32137/"/>
      <url>/posts/32137/</url>
      
        <content type="html"><![CDATA[<h3 id="怎么立-Flag-才不会倒？"><a href="#怎么立-Flag-才不会倒？" class="headerlink" title="怎么立 Flag 才不会倒？"></a>怎么立 Flag 才不会倒？</h3><p>俗话说得好，正月里都是年，给大家拜个晚年，祝愿猪年里的大家也能福气满满，财源广进。同时也祝大家元宵节快乐，今晚记得吃好。</p><p>之前放假回家探亲有半个月，期间为了多陪陪家人，也没写文，只是在打腹稿。</p><p>这一回来就要开始新一年的奋斗了，为了让自己的奋斗有方向，有目标，立几个 Flag 是绝对不能少的环节。</p><p>可俗话又说了，Flag 也不能乱立，搞不好会啪啪打脸。</p><p>那么怎么才能让 Flag 立而不倒，真正完成它呢？</p><p>根据以往自己打脸的经验，我做了个总结：</p><p><strong>1、明确目标，尽可能精确到一个数量</strong></p><p>比如说我去年给自己定的目标：「学习 UI 方面的知识」就很笼统，最后完成的情况当然也是差强人意的。今年我把它改成：「看 5 本 UI 方面的书籍并做好笔记」，精确到一个具体的数值就有了具体的目标，实现起来更有方向性，有盼头。</p><p>再举一个大家都立过的 Flag：今年要多看书。</p><p>很多人知道自己看书少，每年都说自己要多看几本书，但具体是几本，读哪些方向的书，却从没有仔细想过，看起来随心所欲，但一年下来可能还是读不了几本书。</p><p>所以不妨把「今年要多看书」这样笼统的目标改成：「全年阅读 10 本书，其中工作相关 3 本，经济类 2 本，工具类 2 本，文学类 2 本 ，英文原著 1 本」</p><p>有一个数量的约束，做的时候就不会轻易失去兴趣，遇到困难也可以给自己一个盼头再坚持一下，不要随便放弃。</p><p><strong>2、结合自己的时间来合理分配目标</strong></p><p>立好了 Flag ，接下来就是一步步踏实地实现它了，但这里也是有技巧的，尤其是有些时候计划赶不上变化，一旦我们的计划被打乱，再往后是很容易放弃的。</p><p>所以我们一定要结合自己近期的时间，合理地拆解目标并分配到每日的活动中，尽量让自己每天的任务都能完成，并最终坚持到整个目标的实现。</p><p>举个我自己的例子就是，近期会准备考研调剂的事情，很多精力都会放在这上面，所以只能安排一些比较简单、不耗大块时间的任务给自己，比如「利用碎片时间阅读并整理笔记」。</p><p>不能说明知道自己没有时间，还给自己分配根本不可能抽大块时间去完成的任务，比如「利用业余时间做一个小程序临摹项目」，那样就会大大削弱执行的动力了。</p><p><strong>3、完成了之后可以适当晒一晒，增添自己的信心，形成正反馈</strong></p><p>这个其实就比较随意了，有人喜欢晒，有人不喜欢，我其实是不喜欢晒的那种。</p><p>不过最近我也在想着改变了，毕竟现在是一个，自己都不展示自己，就更没人会注意到你的时代。<br>多多展示自己的成就，多少是对自己的一种肯定，会让自己越来越有信心的。</p><p>最后，附上我今年的目标们（后面加了一列对比一下自己以前笼统却从没实现的目标）。</p><p><img src="http://image.tubbodetang.site/2019_Target.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在狗年的尾巴</title>
      <link href="/posts/18710/"/>
      <url>/posts/18710/</url>
      
        <content type="html"><![CDATA[<h3 id="写在狗年的尾巴"><a href="#写在狗年的尾巴" class="headerlink" title="写在狗年的尾巴"></a>写在狗年的尾巴</h3><p>今天已经是小年了，相信很多人已经到家或者在回家的路上了，还没放假的心里也一定多少有点躁动不安无心干正事了吧。</p><p>过年最长也就十几天假期，却多多少少影响了我们将近一个月的心情。很多人从过完元旦心底就有点犯懒惰了，公司肯定也会安排一些总结、考评、年会庆祝工作之类的，更是打乱了工作的节奏，让人天天盼着放假。而年后回来，收心可能也要翻过一个周末才行。</p><p>更可怕的是，2 月只有 28 天，一个不小心，2019 就只剩 10 个月了，六分之一的时间就这么浪费了。</p><p>其实我内心也有点躁动，说不躁动是不可能的好吧，毕竟我家远平时没办法回家，一年也就回家十来天，家里人和自己都盼很久了。我妈上次和我聊天还说平时她忙自己的事想不起来，现在一算今年一整年都没见，然后说着说着她就哭了，弄得我心里也挺不是滋味的……</p><p>不过还要过几天才能回家，还是安心过好最后几天吧。写这文章的目的也是提醒自己，你松懈的时候，还有很多比你优秀的人还在奋斗，比你优秀的人都没停下脚步，你有什么理由松懈呢。</p><p>2018 一个月前已经结束了，不过我也没写什么总结，可能现在的我觉得一个年度要以回家过年作结吧，所以今天也来总结一下我的戊戌狗年。</p><p>今年的几个小目标里完成的有：学车考驾照，思考未来几年的发展方向，还有治好自己多年的贫血这几项。有一个好身体和明确的方向比什么都重要，希望读者们也保护好自己的身体。</p><p>也有没完成的，比如学 Python，画画，学 UI 知识这些学习类的目标。</p><p>没完成其实也并不是完全没有开始，只是计划不够周详，虽然学了但也说不上有啥阶段性的成就。我觉得学习这件事真的是一个持续的事情，不是说随随便便就能说已经完成了。我这目标当初定的确实太泛泛了，以后定目标的时候一定要加一些限制条件了，这样才能看出自己到底走了多远。</p><p>今年后半年的精力主要还是放在考研上了，在准备考研的同时除了上面说的几个我还做了点别的，比如写写公众号，看书弹琴之类的。</p><p>尤其是开始写公众号以后，养成了记录的习惯，平时工作上遇到问题和看书的时候有什么感悟都会记录下来而不是像以前一样随它过去，我个人觉得这个习惯还是挺好的。</p><p>今年犯懒拖延的时候也不少，说起来还是惭愧，和优秀的人比起来我还远远算不上勤奋。战胜自己，真的是一个永恒的课题啊……</p><p>总的来说，对今年的自己还是满意的。</p><p>一年的时间总是固定的，在这件事上分的时间多，其他事情分得的时间就会变少，立 Flag 再多，没有时间去完成也是白搭。</p><p>所以除了提高自己做事的效率，把最宝贵的时间用在对自己最重要最有价值的事情上，应该才是正确的吧。</p><p>————————————<br>一点点总结与感悟<br>不能让狗年白白过去<br>我要抓住它的狗尾巴：)</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的 Tricks - 02</title>
      <link href="/posts/50016/"/>
      <url>/posts/50016/</url>
      
        <content type="html"><![CDATA[<h3 id="程序员的-Tricks-02"><a href="#程序员的-Tricks-02" class="headerlink" title="程序员的 Tricks - 02"></a>程序员的 Tricks - 02</h3><p>嗯，这个栏目好久没更啦，主要是懒，但其次，很久没遇到过需要特殊处理的数据，其实也是一种幸福……</p><p>好，直接进入正题，介绍一下情景：<br>需求方提供了一堆格式类似的文件（视频、图片、文档等），这些文件的文件名已经按照要求命名好，放在层层嵌套的分类文件夹里，而在前端因为要批量展示这些文件，所以得拿到所有文件的文件名列表</p><p>这次的情景还不是特别让人抓狂，但平时遇到的频率应该挺高，所以是非常值得记录的（插一句…我的操作系统是 Windows）。</p><p>比如在下面这个图里，我要拿到当前路径下所有的歌名，不只有当前文件夹下一些分散的歌，还有按照歌手和歌手下面按专辑分类文件夹里面的歌。</p><p><img src="http://image.tubbodetang.site/trick_2_1.png" alt=""></p><p>没有相关经验的人，此时第一个想到的可能就是一个一个文件去复制文件名整理到文档中，当然，这作为最笨的办法，是可行的。缺点就是非常耗时间，而且如果文件很多（几百个），文件夹又分的比较细致，可能刚操作十来个就崩溃打算放弃了。</p><p>这个时候人都会主动寻求一些偷懒的办法，去网上一查，或者问对计算机知识比较了解的人，最后都会指向同一个答案——写个批处理脚本。</p><p>其实批处理脚本的概念并不是那么明确，有些软件也支持写脚本来批量处理软件中要用到的文件的，而我们这篇文主要针对 Windows 来说的。并且我也不打算把批处理文件中用到的各种命令语法在这里啰嗦的说一大堆，日常用的不多的话，学了也会很快忘记。</p><p>对于不同的需求，基本上利用搜索工具都能找到对应的批处理方案，如果不是有特殊需求或者追求酷炫，我认为没必要专门去学写批处理的命令语法。</p><p>最主要的是记住重复的工作计算机总有办法帮我们偷懒批量处理这一条就够了。</p><p>以后再遇到这种情况，只要第一时间想的不是一个一个用最笨的方法去处理，而是赶紧搜一下对应的批处理偷懒方法，我写这篇文章的目的就达到了。</p><p>最后简单介绍一下流程吧，已经熟练的童鞋可以直接关掉页面啦。</p><ol><li>新建一个 .txt 文件，在里面贴上你搜到的对应批处理命令，比如对于我上面举的例子，就是下面这一段（当前文件夹多层级文档列表）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">for</span> /f <span class="string">"delims="</span> %%i <span class="keyword">in</span> (<span class="string">'cd'</span>) <span class="keyword">do</span> <span class="built_in">set</span> <span class="string">"cl=%%~ni"</span></div><div class="line">tree %<span class="built_in">cd</span>% /f&gt;文件夹详情.txt</div><div class="line"><span class="built_in">echo</span> 目录已经存入 %<span class="built_in">cd</span>% 文件夹详情.txt 中！</div><div class="line">pause</div></pre></td></tr></table></figure><ol><li><p>保存 .txt 并关闭，然后修改 .txt 后缀为 .bat ，这时这个文件就已经变为一个批处理文件了 <img src="https://github.com/tubbodeTang/PicBed/blob/master/trick_2_2.png?raw=true" alt=""></p></li><li><p>双击执行 .bat，你可以看到命令行黑框（有的只会一闪而过，和批处理命令怎么写有关），说明我们的命令已经执行了</p></li></ol><p><img src="http://image.tubbodetang.site/trick_2_3.png" alt=""></p><ol><li>我得到的结果如下（歌名按层级全部提取出来）</li></ol><p><img src="http://image.tubbodetang.site/trick_2_4.png" alt=""></p><p>从上面的简单步骤不难看出，批处理真的是偷懒利器，溜了溜了</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书 -「前方的路」</title>
      <link href="/posts/59341/"/>
      <url>/posts/59341/</url>
      
        <content type="html"><![CDATA[<h3 id="读书-「前方的路」"><a href="#读书-「前方的路」" class="headerlink" title="读书 -「前方的路」"></a>读书 -「前方的路」</h3><p>2019 的第一本书，读了阮一峰老师的博客集「前方的路」，这本书是从 2003 年到 2014 年阮老师博客里一些文章的精选，很多都是阮老师读书、看电影或者看报看新闻得到的启发、思考。</p><p>从中可以看到一个人十年中思考方式、生活感悟的变化，也可以看到一个人十年中的坚守和初心。个别章节也可以一窥阮老师对某些事直白不掩饰的态度。</p><p>整体看完之后有感于阮老师以下几点：</p><p><strong>阅读的广泛性及知识储备的广泛性</strong><br>阮老师在文章里各种引经据典还特别流畅，这是一个日渐积累的过程，不可一蹴而就</p><p><strong>思考问题有深度、广度</strong><br>这种思维训练应该也是长期的，时间久了，想事情的时候自然会深入、全面的去想</p><p><strong>表达能力</strong><br>能把一部电影、一部书、一首诗、一篇文的梗概及背后的含义表达出来，也可以把他关于某事的思考清晰的表述出来</p><p><strong>深入求知的精神</strong><br>有时候阮老师对一件事并不是很懂，就会专门去查找，比如冬天是不是有蟋蟀叫声这件事，这种事积累的多了，一定也会逐渐形成知识上的全面</p><p>以上几点印象最为深刻的主要还是阮老师涉猎的广泛，提到了很多我以前从不知道的书籍、人物和他们的各种形式的作品，所以我做了一个记录。</p><p>我整理了一份「前方的路」中所提到的书单，虽然读了这些书也不能立刻马上变成阮老师一样厉害的人，但不论如何读了与不读总会有些差别，尤其是读书的同时所进行的思考，是必要的，只有这样，才有自己的积累。</p><p><img src="http://image.tubbodetang.site/booklist_wayahead.png" alt=""></p><p>最后贴一段书中目前最喜欢的一段话作为结尾，和大家共勉。</p><blockquote><p>不要幻想一切会自然发生，也不要幻想其他人会做。哪怕你是最微不足道的一个小人物或者外行，只要动手做了，世界就会不同。——《前方的路-十年》</p></blockquote><p>————————————<br>思考是一条必经之路</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用图表总结——柱图</title>
      <link href="/posts/30816/"/>
      <url>/posts/30816/</url>
      
        <content type="html"><![CDATA[<p>最近工作上遇到很多图表展示的情景，很多时候我们都会被长得类似的图表或者多种图一起用的情况给弄懵，一时间不知道图表究竟要传达怎样的含义，为了更好的使用图表传达我想要的效果，我在「墨者学院」上学习了一些相关内容。</p><p>虽然蚂蚁金服团队总结的已经比较完善了，但对我来说，「墨者学院」有一个很大的问题就是它是按照图表的功能来进行分类的，而有些图表是有多个功能的，这样的话在很多分类中都能看到重复的图表，我觉得稍微有些乱，所以就来自己总结一下。</p><p>先从最基础也是用的最多的几类图表开始总结吧，很多玫瑰图啊之类的其实平时用到的场景远没有基础的几类图表多。</p><p>能用好、用对、读对几类基础的图表已经很厉害了。</p><p>今天是各种柱状图的主场。</p><p>首先要明确一点，柱状图一般都是用来展示对比数量的，通过柱子的长短，来代表数量的多少。</p><p>只有在极少数的情况，柱子才用来展示占比情况，比如后面要说的堆叠柱状图。</p><h3 id="最普通的柱图"><a href="#最普通的柱图" class="headerlink" title="最普通的柱图"></a>最普通的柱图</h3><p><img src="http://image.tubbodetang.site/bar_1.png" alt="普通柱图"></p><p>最普通的柱图相信每个人都很熟悉了，它是一种使用垂直或水平的柱子来显示类别之间数值比较的图表。其中一个轴表示需要对比的分类（通常是 X 轴），另一个轴代表相应的数值（通常是 Y 轴）。</p><p>在柱子比较多的情况下，一般会使用水平的柱子，由于人们从左至右、从上至下的阅读习惯，这样做能避免由于数据量大而不便于阅读图的弊端。</p><p><img src="http://image.tubbodetang.site/bar_2.png" alt="柱图横竖对比"></p><h3 id="柱图的引申"><a href="#柱图的引申" class="headerlink" title="柱图的引申"></a>柱图的引申</h3><h4 id="1-分组柱状图"><a href="#1-分组柱状图" class="headerlink" title="1.分组柱状图"></a>1.分组柱状图</h4><p>分组柱状图经常用于不同组间数据的比较，这些组都包含了相同分类的数据。</p><p>可以用来对比不同分组内相同分类的大小，或者用来对比相同分组内不同分类的大小。</p><p><img src="http://image.tubbodetang.site/bar_3.png" alt="分组柱状图"></p><h4 id="2-堆叠柱状图"><a href="#2-堆叠柱状图" class="headerlink" title="2.堆叠柱状图"></a>2.堆叠柱状图</h4><p>与并排显示分类的分组柱状图不同，堆叠柱状图将每个柱子进行分割以显示相同类型下各个数据的大小情况。</p><p>它可以形象的展示一个大分类包含的每个小分类的数据，以及各个小分类的占比，显示的是单个项目与整体之间的关系。</p><p><img src="http://image.tubbodetang.site/bar_4.png" alt="堆叠柱状图"></p><h4 id="3-双向柱状图"><a href="#3-双向柱状图" class="headerlink" title="3.双向柱状图"></a>3.双向柱状图</h4><p>双向柱状图，使用正向和反向的柱子显示类别之间的数值比较，可以明显的区分出两种方向，一般用的都是水平柱子。使用不同颜色的柱子，可以使反差更大一些。</p><p>常见的收支图就是一种双向柱状图。</p><p><img src="http://image.tubbodetang.site/bar_5.png" alt="双向柱状图"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>上面初步介绍了一下今天登场的柱图们，为了对它们的适用情景和注意的地方有个更明晰的认识，我总结了下面这张表格作为最终的对比，全是干货。</p><table><thead><tr><th>分类</th><th>适合场景</th><th>不适用的情况</th><th>数据量</th><th>注意的地方</th></tr></thead><tbody><tr><td>普通柱状图</td><td><strong>对比</strong>同类型数据不同分组的数据大小、多少，只有一个类型的展示</td><td>不适合用于趋势的展示</td><td>最好展示10-30组数据</td><td>10组数据左右且分组名不太长的时候可以采用横向排列的柱图<br>超过10组最好使用纵向排列的柱图，便于读者阅读分组名</td></tr><tr><td>分组柱状图</td><td><strong>对比</strong>多个类型数据在不同分组的数据大小、多少，同时还能对比同一分组内不同类型数据的多少</td><td>不适用于查看分组的总体数量</td><td>由于分组中的类型可能比较多，所以这种方式建议：分组数控制在10个左右<br>类型数控制在5个左右</td><td>分组数多的情况建议纵向排列</td></tr><tr><td>堆叠柱状图</td><td><strong>对比</strong>多个类型数据在本分组中的数据大小、多少、占比情况，同时还能观察到分组的总体数量</td><td>由于基准线不同，不适用在分组间进行多个类型数据的对比</td><td>同上</td><td>同上</td></tr><tr><td>双向柱状图</td><td>适用于<strong>对比</strong>存在反向互斥类型数据在本分组中的数据大小、多少、占比情况，在互斥条件处的数据反向分布，对比更加强烈</td><td>不适用于没有反向互斥含义的情形展示</td><td>同上</td><td>一般都是纵向排列</td></tr></tbody></table><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>以上几种柱图之间，其实又可以互相组合展示，变成比较复杂的复合柱图，这种图所包含的信息量就比较大了，看着高大上，读起来也会费劲一些。</p><p>比如说上面的收支图，其实是双向柱图和分组柱图的结合。</p><p>而下面这张图，又是分组柱图和堆叠柱图的结合了。</p><p><img src="http://image.tubbodetang.site/bar_6.png" alt="扩展组合"></p><p>这种扩展就比较灵活了，依照情景按需组合使用就可以了，不过也要注意读图的难易程度，不要做得过于复杂，让读者看不懂。</p><p>————————————</p><p>P.S.</p><p>想直接学习的可以搜「墨者学院」</p><p>本文所有图表来自「Echarts」制作</p><p>转载请注明出处</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别在信息洪流里迷失了方向</title>
      <link href="/posts/53827/"/>
      <url>/posts/53827/</url>
      
        <content type="html"><![CDATA[<h3 id="别在信息洪流里迷失了方向"><a href="#别在信息洪流里迷失了方向" class="headerlink" title="别在信息洪流里迷失了方向"></a>别在信息洪流里迷失了方向</h3><p>最近一段时间，身边发生的事特别多，疫苗事件，P2P 大规模暴雷，租房市场的乱象，等等等等，我就不一一列举了，大家都懂的，件件都关乎着努力搬砖的我们的切身利益。</p><p>随便打开一个社交媒体，讨论这些事的信息都像疾风骤雨般扑面而来，你不得不关注。</p><p>微博热搜榜、话题层出不穷。微信群、朋友圈都在转发文章热烈讨论，微信公众号里关注的很多自媒体人，也都纷纷发声。甭管是什么角度，什么立场，总有和这些事情沾边的。</p><p>这些各种各样的文章、信息、消息中有一部分的的确确逻辑清晰，分析透彻到位，但也有各种五花八门的标题党、声称内部消息的种种垃圾文蹭热度的。</p><p>这还仅仅是我比较常用的两个，一个微博，一个微信。更不用说类似头条这种新闻类 APP 上的情况了。</p><p>身处一个信息爆炸的时代，我们赶上了好时候，世界各地发生点什么风吹草动，奇闻轶事，都能通过网络或快或慢的传播到我们的身边，这确实拉近了我们和世界的距离，开阔了我们的眼界。</p><p>但相对的，这些信息的数量之大，要想全部消化接收，实属不易。而且信息的质量也参差不齐、内容有待考证。正所谓『媒体想让你看到的，只是他们想让你看到的而已』。</p><p>有一些文章，写出来是带有感情色彩、价值导向的，如果自己的内功比较强，还能在独立思考之后有一个正确的认识，而如果自己的功力比较差的话，自己的认识实际上很容易被这些文章带跑偏的。</p><p>我自己就觉得经常刷微博看到社会上一些比较丧的事情，简直有点心寒到不想努力了，感觉努力了，也有一些你控制不了的事情来给你的人生送去打击。</p><p>一般被这种丧情绪感染到这种地步，我都立马关掉这些页面，干会儿别的，缓解一下莫名其妙的压力，毕竟人生还是要向前走，不能随便就失望啊。</p><p>我觉得我还是相对比较理智的人了，但都经常有上述这种情况发生。所以为了避免这种情况的发生，我给自己总结了几点需要注意的地方，拿出来和大家共勉。</p><p><strong>1、 注重自己的信息来源</strong></p><p>尽量选择几个可靠的信息来源，可以不同角度各选一个，并且固定关注就可以了，避免自己获得的信息是某个人的个人看法，太过片面，同时也避免关注太多的信息，把自己置于洪流中浪费时间。</p><p>说真的，多看一些信息多少是对自己全面的认识某一件事是有帮助的，但是我觉得了解的再多，有的时候就凭一己之力我们也是没有办法去改变什么，可能最多就是帮忙转发扩散一下。所以第二点：</p><p><strong>2、可以看，但要理智的看，不要被媒体的陷阱捕捉，一直刷个不停</strong></p><p>有些事情，通过可靠的信息来源了解了来龙去脉，个中利益，就可以在短期内不要去看了。因为一件事热点的时候，各大媒体说的话都类似，文章的内容也类似，甚至有很多都是蹭热度转发引用、洗稿粘贴的，这种时候还一篇接着一篇看，想从中得到更多的信息，纯属浪费时间。</p><p>不如等热度过去一些了，有不同角度的声音出来了，再看一下其他角度，让自己理性认识，也避免自己被同样的文章内容煽动，带上有色眼镜或者不理智的情绪看待这个事件。毕竟现在的媒体都喜欢玩反转，搞得好像事情一天一个样子。</p><p>最后一点，也是最重要的一点：</p><p><strong>3、形成了一个比较客观的认识之后，最重要的还是做好自己该做的事，让自己变得更强</strong></p><p>只有自己变的更强了，我们才能更好的应对这些发生在我们身边的热点事件，早做准备，避免受到很大的打击或者影响。</p><p>也只有自己变的更强，才能有机会和能力，贡献自己的一份力量，发出自己的声音。</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的 Tricks - 01</title>
      <link href="/posts/49696/"/>
      <url>/posts/49696/</url>
      
        <content type="html"><![CDATA[<p>这两天坐地铁，听到站内广播：</p><p>北京地铁站内不再开具纸质发票，有需要的乘客得去 「北京一卡通 APP」获取电子发票。</p><p>得，无纸化了。</p><p>这其实也算是城市无纸化办公模式的一个缩影。不知道大家注意过没有，现在很多发票都变成电子的了，申领操作也都可以通过网络以及各种电子设备进行。</p><p>这也就从侧面反映出相比以前人们需要阅读大量的纸质文档，现在取而代之的是每天面对电脑、智能手机这些电子产品，我们每天都在接收、产生、传递着大量的电子化数据。</p><p>作为一个前端码农，我们比普通人离这些电子化数据更近一些，每天都在和大量需要展示的数据打交道。但是，有些数据并不是拿来就能用的。</p><p>由于各种各样的原因，我们每天工作的时间其实有一部分并不是在写代码，而是在整理这些未经处理不能拿来使用的数据。数据量小的话还好说，如果数据量大， 那简直要逼疯一个人啊！</p><p>不过好在，我们是码农，遇到这种情况，第一个想到的就是：偷懒，这种重复又没有营养的工作，应当交给计算机去帮我们完成，我们的时间如此宝贵，还要用来多写几个 bug 呢。</p><p>而这几天的我总是遇到上面说的「各种各样的原因」，所以也找到一些处理这些烦人数据的「偷懒」方法。想到以后可能还会源源不断的遇到这种事，而且大家在工作中难免也常会遇到，不如总结起来，形成一个栏目「程序员的 Tricks」，以后找的时候也方便一些。</p><p>好了，扯了这么多，今天先分享第一个小 Trick 吧。</p><hr><p>情景：</p><blockquote><p>从一个放了 48 张 3M 左右大小照片的单页 PPT 中提取出所需要的照片。</p></blockquote><p>听起来就很变态，48 张大图放在一张 PPT ，真不知道提供数据的人怎么想的，我连打开这个 PPT 文档电脑都快卡的不能动了好吗？还让我一张一张的保存？</p><p>登时我就快炸了，然而机（懒）智（惰）的我，立刻搜索到了化解尴尬的办法，骚操作走一波：</p><p>有这样一个一页放了 N 多大图的 PPT</p><p><img src="http://image.tubbodetang.site/trick_1_1.png" alt="ppt"></p><ol><li>把 PPT 文件的后缀名改成压缩文件的后缀名「 .rar 」</li></ol><p><img src="http://image.tubbodetang.site/trick_1_2.png" alt="rename"></p><ol><li>把变成压缩文件的 PPT 解压到文件夹</li></ol><p><img src="http://image.tubbodetang.site/trick_1_3.png" alt="unzip"></p><ol><li>进入解压的文件夹，路径如下「 示例 &gt; ppt &gt; media 」，可以看到所有用在 PPT 中的图片，都在该文件夹中，直接按需获取即可</li></ol><p><img src="http://image.tubbodetang.site/trick_1_4.png" alt="getAll"></p><p>当然啦，这个方法不止适用于我遇到的这种变态情况，如果平时看到 PPT 中好的素材比较多，也可以通过这个方式来批量提取。</p><p>还有更多的应用场景我就不赘述了，了解了这个方法，相信遇到别的情况之时，也能快速的想起并应用其中。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具推荐——Cmder</title>
      <link href="/posts/65333/"/>
      <url>/posts/65333/</url>
      
        <content type="html"><![CDATA[<p>做开发久了，每次在论坛上查找问题的时候总是看到用 Mac 或者其他非 Windows 环境开发者的终端截图，又漂亮又明晰，看着才有点像电影里演的 Hacker 那样高大上。然而大多数是用 Windows 自带终端的我们，看起来总是不那么酷炫，并且使用中确实有些必要的、能提升开发效率的功能是缺失的。</p><p>鉴于此，我在查找了一番之后，发现了 Cmder 这个 Windows 环境下的终端神器，体验确实很不错，所以推荐给大家。</p><p>Cmder 的优点：</p><ul><li><p>是免安装压缩包，解压直接可用</p></li><li><p>支持 Git 等命令</p></li><li><p>支持多标签页</p></li><li><p>支持自定义终端</p></li><li><p>内置多种主题，支持自定义主题</p></li></ul><p><img src="http://image.tubbodetang.site/cmder_main.png" alt="官网"></p><p>上面这个图是我从 Cmder 的<a href="http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q" target="_blank" rel="external">官网</a>找的。</p><p>不过本文到此还没有结束。</p><p>平时开终端的时候都是直接用『Win+R』命令，然后运行 cmd 的，为了使用 Cmder 也能这样方便，不用每次都开启 .exe 文件，我们当然还要为 Cmder 配置环境变量啦。</p><p>环境变量配置如下：</p><p>先给系统变量中添加一个变量，值是解压后 Cmder.exe 所在的路径，然后将这个新添加的变量添加到系统 Path 中：</p><p><img src="http://image.tubbodetang.site/cmder_3.jpg" alt="环境变量"></p><p>如果有需要，还要向用户变量的 Path 中添加解压后的 bin 路径，才能使配置生效。</p><p><img src="http://image.tubbodetang.site/cmder_2.jpg" alt="Path"></p><p>做好配置之后，可以直接使用『Win+R』命令，然后运行 cmder 就可以直接启动 Cmder 了。</p><p><strong> 还有一个很重要的懒人配置 </strong> 就是平时开发的时候一般不会用命令行直接去找执行路径，而是在路径下『Shift+右击』快速打开该路径下的终端。</p><p>Cmder 也可以这样配置，我们只需要以管理员方式打开 Cmd 或者 PowerShell ，输入 『Cmder.exe /REGISTER ALL 』然后执行就可以了。之后我们就能在任意菜单下右击，点击『Cmder Here』 即可。</p><p>最后效果就是这样的：</p><p><img src="http://image.tubbodetang.site/cmder_1.png" alt="last"></p><p>其他的个性化设置，比如主题更换等我就不多啰嗦了，在Settings里大家都可以快速找到</p><p><img src="http://image.tubbodetang.site/cmder_0.jpg" alt="settings"></p><p>毕竟自己配置的才是最酷最好用最适合自己开发习惯的。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018 年中总结</title>
      <link href="/posts/5018/"/>
      <url>/posts/5018/</url>
      
        <content type="html"><![CDATA[<h3 id="2018-年中总结"><a href="#2018-年中总结" class="headerlink" title="2018 年中总结"></a>2018 年中总结</h3><p>年初（啊好吧其实那个时候已经四月五月了……）给自己定了几个小目标：</p><p>1、学车考驾照<br>2、画完『 30 天学会绘画』这本书<br>3、学习 Python<br>4、学习 UI 方面的知识<br>5、思考清楚人生的方向，究竟是继续坚持考研，还是赶紧充实自己，获得职业的提升</p><p>半年时间已经飞快的过去了，下面总结一下自己这半年的成果、得失，以便更好地出发，和大家一起共勉。</p><p>经过一个多月的早起和晒黑，目前学车这一个目标已经达成，半个月之前开心的拿到本了，之前看到星球里也有一个童鞋发了自己学车的经历，感觉仿佛看到了自己，后面我也会在公众号专门再写一个文，记录一下这个充满新鲜感和挑战的经历。</p><p>第二个目标已经完成一半了，之前好几年搁置的画笔算是又稍微捡起来了点，画画对放松心情、调节生活是很有帮助的。而且后续如果想要学习UI方面的知识并向这方面发展，不说会画多么精致的图，至少基本的审美水平和与别人沟通时候画草图什么的技能还是很需要锻炼的，闲暇的时候画画图，也有助于自己以后这方面的培养。</p><p>学习  Python 这方面，我还只是学了一点皮毛，一些基础的语法。期间由于工作的原因，我还抽出时间看了 Nodejs 进阶。两相比较，感觉如果不能应用到实际工作中，单纯学习的话，转化率还是比较低的。所以后半年的学习我会争取做一些实际的例子出来分享或者上传到 GitHub，作为对自己学习的一个监督。（题外话：自己感觉这两个东西有相通的地方，毕竟语言只是工具，达成目的才是我们要的。）</p><p>学习 UI 方面的知识这个目标，设立的比较宽泛，所以做起来其实也不是很有规划，除了平时看关注的几个公众号的推送，然后积累一些素材以外我还没有做特别多的工作。其实我这里的学习资料还挺多的，书籍、视频之类的，但是就是没有一个特别详细、系统的规划，有时候时间也不允许我分这么多精力在这个上面，所以始终没有特别多进展。后面我会再拆解掉这个目标，希望今年年底至少能把手头积攒的一些资料慢慢消化掉。</p><p>最后一个其实才是最重要的，人生有了明确的目标，才能朝着目标奋斗。考研这个事情，从大学毕业之后就一直在计划并且尝试了，但，一个是因为自己努力的程度不够，总是因为工作或者其他事情分心。另一个，想到国内的教育现状，自己目标就定的比较高，可以说有那么点难以实现……所以结果就不是特别好。今年，我想再给自己最后一次机会，算是破釜沉舟吧，静下心来好好复习，如果还是没有好的结果，就借着备战考研中积累的知识和技能，踏踏实实的在工作岗位上努力，后续通过工作岗位的转换、最后实现自己向交互方向转岗的心愿。</p><p>上半年的总结就这么多，已经写的有些长了，不过看清楚了自己的得失，心里也更平静了一些……</p><p>下半年，继续努力，就是干！</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts 之复合饼图的解决方案</title>
      <link href="/posts/38946/"/>
      <url>/posts/38946/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Echarts 是百度出品的功能强大的开源可视化库，由 Javascript 实现。<br>具有丰富的可视化类型，良好的跨平台特性，绚丽的视觉效果。<br>是大数据分析展示的有力武器</p></blockquote><p>老实说其实在我刚进入前端开发这个领域的时候就听说并使用了 Echarts ，那个时候还是 1.0 版本。</p><p>最开始只是用到一些简单的条、饼、线图的组合展示，有时候我还会偷懒直接使用 <a href="http://tushuo.baidu.com/" target="_blank" rel="external">图说</a> 的可视化功能进行操作，也还挺方便的，不用记那么多属性，但是现在 <a href="http://tushuo.baidu.com/" target="_blank" rel="external">图说</a> 已经满足不了我更高级的需求了，有什么问题还是看文档更清晰。</p><p>一直到今天，Echarts 已经出了 4.0 版本，功能和性能都有了非常的大的提升，也正因为这样，使用 Echarts 的人越来越多，Echarts 的社区也越来越活跃，活跃的社区又会促进 Echarts 生生不息的向前发展，形成一个良性循环。我想，这就是开源的魅力吧。</p><p>最近在工作当中使用 Echarts 来深度挖掘和展示我手头的数据，发现有一个地方可能需要复合饼图来展示效果比较好。</p><p>看了很多官方的实例，没有特别称手能直接拿来用的。GitHub 上 Echarts 的 Issues 区我也去搜了，看有没有人已经踩过坑。结果发现一天前，就有人提了一个和我一模一样的情景，问有没有用复合图来实现的方案，他也不知道怎么解决。</p><p>哈哈，结果还是要靠自己了。</p><p>于是乎看了一些 Echarts Gallery 上大家的奇思妙想之后，我也有了灵感。</p><p>（这里穿插说一句，Echarts 升级之后社区真的变强了很多，不仅有很清晰的官方文档和实例，Gallery 里各方大神的脑洞也真的很精彩，比如我就看见过用 Echarts 做动画的，Flappy Bird，扫雷，还有一些酷炫的 3D 效果我就不说了，一打开那界面电脑风扇都开始呜呜响，哈哈，留待给以后慢慢发掘，有空专门再写一个收集贴。）</p><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>第一个方案是想画两个饼图，再用 series-&gt;type:graph 这个属性画两根线把两个饼图连起来。</p><p>尝试了多次，发现不能通过点坐标的调整得到线的正确位置。我想要的是直角坐标，所以从直角坐标的角度看来，线的中心点是固定的，一直在 (0，0) ，不能上下左右移动。也就是说 y=kx+b 的 b 一直都是 0，只有线的斜率一直在变化，所以我判断那个坐标有可能是极坐标，所以才没有办法按直角坐标得到正确的结果。</p><p>而且使用这种方式还有一个弊端，就是两个饼图连接点的坐标，其实不那么好确定，因为有可能随着百分比的变化而变化。所以最终，我放弃了这个方案。</p><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>换一个思路，采用之前在 Gallery 中看见过的环状图套饼图来实现。</p><p>我看见过用透明环状饼区来占位的，这样看起来透明饼区就不存在了，只能看到不透明的饼区，刚好可以用来做展开的详细复合图。</p><p>于是乎有了下面这个效果，具体代码实现和结果可以到 Gallery 里 <a href="http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q" target="_blank" rel="external">查看</a>。</p><p><img src="http://image.tubbodetang.site/echart_complexpie.png" alt="实现效果图"></p><p>两个版本的思路出来效果之后，我都给了 GitHub Issues 上和我相同问题的那个哥们一个回复，他也回复了我，和大家一起思考问题的感觉还是很棒的。E []E</p><p>我发表在 Gallery 里的 <a href="http://gallery.echartsjs.com/editor.html?c=xHJaWqD-1Q" target="_blank" rel="external">示例</a>，截至目前也已经有了二十多次的浏览量。</p><p>这就是分享的力量，它不仅帮助别人，同时也在激励监督自己，让自己做的更好。</p><p>这是我第一次体验到分享的乐趣，所以记录下来，鞭策自己以后更加努力！</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 之数组操作（下）</title>
      <link href="/posts/12448/"/>
      <url>/posts/12448/</url>
      
        <content type="html"><![CDATA[<blockquote><p>嗯，接着上次的写，这次写的几个方法，使用频率相对来说少一些，最后几个混个眼熟吧，可能不经常用还是会忘记（捂脸</p></blockquote><h2 id="数组的常用操作"><a href="#数组的常用操作" class="headerlink" title="数组的常用操作"></a>数组的常用操作</h2><h4 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h4><h5 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h5><p>用于复制调用数组中的一部分，到调用数组的指定位置。会覆盖原有的元素。</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// copyWithin(复制目标位置，?复制源起始位置，复制源结束位置。默认是到数组的末尾)</div><div class="line">// 注意，源起始位置和结束位置的大小如果不对，这个方法将毫无作用。</div><div class="line"></div><div class="line">var Array1=[a,b,c,d,e,f];</div><div class="line"></div><div class="line">Array1.copyWithin(2,0);</div><div class="line">// 结果是Array1=[a,b,a,b,c,d]</div><div class="line"></div><div class="line">Array1.copyWithin(2,0,3);</div><div class="line">// 结果则是Array1=[a,b,a,b,c,f]</div></pre></td></tr></table></figure></p><h5 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h5><p>用于把某个对象或值填充到数组，此操作会改变原数组的元素</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// array.fill(要填充的对象 , ?开始填充的位置。默认是0 , ?停止填充的位置。默认array.length)</div><div class="line"></div><div class="line">var Array1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;];</div><div class="line">var f = [&quot;hh&quot;, &quot;jj&quot;];</div><div class="line">Array1.fill(f, 1, 3);</div><div class="line"></div><div class="line">// Array1 输出结果：[Array(2), Array(2), Array(2), Array(2)]</div></pre></td></tr></table></figure></p><h5 id="join-VS-toString"><a href="#join-VS-toString" class="headerlink" title="join() VS toString()"></a>join() VS toString()</h5><p>join() 用于把数组中的所有元素转换一个字符串。<br>这些元素是通过指定的分隔符进行分隔的，如果没有指定，默认是用逗号分隔。<br>而 toString() 把数组中的所有元素转换一个字符串并用逗号分隔，不能指定分隔符。<br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// array.join(?分隔符。默认是&quot;,&quot;)</div><div class="line">// array.toString()</div><div class="line"></div><div class="line">var f = [&quot;hh&quot;, &quot;jj&quot;];</div><div class="line">var Array1 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, f];</div><div class="line">console.log(Array1.join(&quot;#&quot;)); // 控制台输出 a#b#c#d#e#hh,jj</div><div class="line">console.log(Array1.toString()); // 控制台输出 a,b,c,d,e,hh,jj</div></pre></td></tr></table></figure></p><h5 id="reduce-VS-reduceRight"><a href="#reduce-VS-reduceRight" class="headerlink" title="reduce() VS reduceRight()"></a>reduce() VS reduceRight()</h5><p>这两个方法也类似，只不过 reduceRight() 从右往左操作，reduce() 从左往右操作。</p><p>以 reduceRight() 为例介绍用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//array.reduceRight(function(初始值, 或者计算结束后的返回值, 当前元素, ?当前元素的索引, ?当前元素所属的数组对象), ?计算的初始值。默认是尾元素，这时计算将从倒数第二个元素开始。如果指定了初始值，计算将从第一个元素开始)</div><div class="line"></div><div class="line">var numbers = [2, 45, 30, 100];</div><div class="line">function getSum(total, num) &#123;</div><div class="line">    return total - num;</div><div class="line">&#125;</div><div class="line">console.log(</div><div class="line">  numbers.reduceRight(getSum,200);</div><div class="line">)</div><div class="line">// 控制台输出23</div><div class="line"></div><div class="line">console.log(</div><div class="line">  numbers.reduceRight(getSum);</div><div class="line">)</div><div class="line">// 控制台输出23</div></pre></td></tr></table></figure></p><p>这两个操作还能衍生出一些神奇的功能，请移步<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="external">这里</a>参考</p><h5 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h5><p>用于向源数组中删除，添加元素，参数比较多，直接看例子比较清楚。</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//array.splice(start, ?deleteCount, ?item1, ?item2, ?...)</div><div class="line">//除开始操作的位置必须外，其他都是可选项</div><div class="line">//也有以下三种情况，注意区间的位置，都是闭区间</div><div class="line">//1. 从start位置开始删除[start，end]的元素。</div><div class="line">//array.splice(start)</div><div class="line">//2. 从start位置开始删除[start，Count]的元素。</div><div class="line">//array.splice(start, deleteCount)    </div><div class="line">//3. 从start位置开始添加item1, item2, ...元素。</div><div class="line">//array.splice(start, 0, item1, item2, ...)   </div><div class="line"></div><div class="line">var myFish = [&quot;parrot&quot;, &quot;anemone&quot;, &quot;blue&quot;, &quot;trumpet&quot;, &quot;sturgeon&quot;];</div><div class="line">var removed = myFish.splice(myFish.length - 3, 2,&quot;red&quot;);</div><div class="line">// 运算后的myFish： [&quot;parrot&quot;, &quot;anemone&quot;, &quot;red&quot;, &quot;sturgeon&quot;] </div><div class="line">// 被删除元素数组：[&quot;blue&quot;, &quot;trumpet&quot;]</div></pre></td></tr></table></figure></p><h5 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h5><p>valueOf() 方法返回 Array 对象的原始值。即 Array1.valueOf()与 Array1 返回值一样。<br>valueOf() 方法通常由 JavaScript 在后台自动调用，不需要在代码中出现，了解一下即可。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 之数组操作（上）</title>
      <link href="/posts/52385/"/>
      <url>/posts/52385/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从今天开始，将系统总结一系列 Javascript （Js）的原生操作。因为平时很多时候都是在使用现成的 Js 框架进行开发，（如 Jquery、AngularJs 等），对 Js 本身反倒没有太多关注。但万变不离其宗，相信对 Js 更深入、更全面的掌握，才是更好理解、运用上层框架的基础。</p></blockquote><p>平时开发中遇到最多的数据处理，肯定不外乎就是处理大量的数组数据。</p><p>不管是遍历还是数组整体操作，只有更熟练才能更高效的从海量数据中得到我们所需要的信息。</p><h2 id="Js中的数组"><a href="#Js中的数组" class="headerlink" title="Js中的数组"></a>Js中的数组</h2><p>众所周知，Js 中所有的变量都是对象，所以数组也是一种对象。</p><h4 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h4><p>简单介绍一下数组的创建，有三种形式：</p><ol><li><p>第一种（最笨最普通的方法，平时都不会这么写）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var myArray=new Array();</div><div class="line">myArray[0]=1;</div><div class="line">myArray[1]=2;</div><div class="line">myArray[2]=3;</div></pre></td></tr></table></figure></li><li><p>第二种（平时也不会用到）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var myArray=new Array(1,2,3);</div></pre></td></tr></table></figure></li><li><p>第三种（本人最常用到）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var myArray=[1,2,3];</div><div class="line">//或者直接创建空数组</div><div class="line"></div><div class="line">var myArray=[];</div><div class="line">//然后再进行一系列赋值操作</div></pre></td></tr></table></figure></li></ol><p><em>注意</em></p><p>Js 的同一个数组中可以有不同类型的元素，虽然平时处理数据可能很少有这种情况出现，但是知道也没坏处</p><h4 id="数组的访问"><a href="#数组的访问" class="headerlink" title="数组的访问"></a>数组的访问</h4><p>Js 中的数组也遵循循秩访问，访问的时候直接通过下标就可以访问到对应元素，上面的例子其实已经提到，就不再啰嗦了</p><h2 id="数组的常用操作"><a href="#数组的常用操作" class="headerlink" title="数组的常用操作"></a>数组的常用操作</h2><h4 id="数组的常用属性"><a href="#数组的常用属性" class="headerlink" title="数组的常用属性"></a>数组的常用属性</h4><h5 id="length"><a href="#length" class="headerlink" title="length"></a>length</h5><p>用来返回数组元素的个数，循环的时候可用作边界条件</p><h4 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h4><p>这个部分比较长，所以打算按方法的使用频率降序分两次写完。  </p><h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5><p>用于连接2或2+个数组，concat这个词语也是编程的专业术语，基本只会在讨论编程的时候才会出现。</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var Array1=[a,b,c];</div><div class="line">var Array2=[d,e];</div><div class="line">var Array3=[f];</div><div class="line">var result=Array1.concat(Array2,Array3);</div><div class="line">// result=[a,b,c,d,e,f]，是Array1的一个副本，一个新数组。</div><div class="line">// 这里的a，甚至可以是数组（在浏览器中可以解析）。</div><div class="line"></div><div class="line">// 也可以像下面这样</div><div class="line"></div><div class="line">var result=Array1.concat(Array2,Array3,&quot;c&quot;);</div><div class="line">// result=[a,b,c,d,e,f,&quot;c&quot;]</div></pre></td></tr></table></figure></p><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h5><p>用于让数组中每个元素都执行一次回调函数。<br>这个方法可以说是平时用的最多的了，不过，有些时候是属于滥用，我自己就因为对其他更方便的方法不了解，滥用 forEach() 去帮我处理数组。<br>简单介绍一下用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// array.forEach(function(currentValue, ?index, ?arr), ?thisValue)</div><div class="line"></div><div class="line">var Array1 = [4, 9, 16, 25];</div><div class="line">Array1.forEach(function(item,index)&#123;</div><div class="line">  console.log(&quot;[&quot;+index+&quot;]:&quot;+item);</div><div class="line">&#125;)</div><div class="line">// 控制台输出</div><div class="line">// [0]:4</div><div class="line">// [1]:9</div><div class="line">// [2]:16</div><div class="line">// [3]:25</div></pre></td></tr></table></figure></p><p><em>注意</em><br>这个方法的返回值是 undefined，所以它不能进行链式操作之类的操作。而且这个方法在循环的过程中是无法终止的，如果想中途终止，不如用普通的循环操作。如果循环的目的是通过判断数组里的元素是否满足条件进而返回布尔值，不如改用 some() 或 every() 方法。</p><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><p>用于让数组中每个元素都执行一次回调函数并返回新的数组。<br>这个方法平时用也挺多，和 forEach() 稍稍有点像，不同的就在于它会返回所有回调函数要求返回的对象。<br>简单介绍一下用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// array.map(function(currentValue,?index,?arr), ?thisValue)</div><div class="line"></div><div class="line">var Array1 = [4, 9, 16, 25];</div><div class="line">var Array1_doubled = Array1.map(function(item)&#123;</div><div class="line">   return num * 2;</div><div class="line">&#125;)</div><div class="line">// Array1_doubled 数组的值为： [8, 18, 32, 50]</div><div class="line">// Array1 数组未被修改： [4, 9, 16, 25]</div></pre></td></tr></table></figure></p><p>map() 可以应用的操作也很多，可以做<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external">扩展了解</a>，在平时的开发中多用，才能熟练。</p><h5 id="every-VS-some-includes"><a href="#every-VS-some-includes" class="headerlink" title="every() VS some() includes()"></a>every() VS some() includes()</h5><p>上面这三个都是比对查找操作，有些类似，所以放在一起讲了。</p><p>不同的是，includes() 只能直接查找值，而 every() 和 some() 可以对数组中的元素进行更详尽的比对查找，可以用函数设置查找条件。</p><p>every() 和 some() 有点像 &amp;&amp; 和 || 的关系</p><p>every() 有点像 &amp;&amp;，用于检测数组<strong>所有元素</strong>是否都符合指定条件（通过函数提供）。</p><ul><li>如果数组中检测到有一个元素<strong>不满足</strong>，则整个表达式返回 false ，且剩余的元素不会再进行检测。</li><li>如果所有元素都满足条件，则返回 true。</li></ul><p>而 some() 有点像 ||，用于检测数组中是否有满足指定条件的元素（通过函数提供）。</p><ul><li>如果<strong>有一个元素满足条件</strong>，则表达式返回 true , 剩余的元素不会再执行检测。</li><li>如果没有满足条件的元素，则返回 false。</li></ul><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// arr.includes(要查找的值, ?从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。)</div><div class="line">var site = [&apos;runoob&apos;, &apos;google&apos;, &apos;taobao&apos;];</div><div class="line">site.includes(&apos;runoob&apos;); // true </div><div class="line">site.includes(&apos;baidu&apos;); // false</div><div class="line"></div><div class="line"></div><div class="line">// every() 和 some() 这里只以some()举例</div><div class="line"></div><div class="line">// array.some(function(当前元素的值,?当期元素的索引值,?当期元素属于的数组对象),?thisValue)</div><div class="line"></div><div class="line">// 检测数组中是否有元素大于 18，只要有就返回 true</div><div class="line"></div><div class="line">var ages = [3, 10, 18, 20];</div><div class="line">console.log(ages.some(function (age) &#123;</div><div class="line">    return age &gt;= 18;</div><div class="line">&#125;))</div><div class="line"></div><div class="line">// 控制台输出 true</div></pre></td></tr></table></figure></p><h5 id="pop-push-VS-shift-unshift"><a href="#pop-push-VS-shift-unshift" class="headerlink" title="pop() push() VS shift() unshift()"></a>pop() push() VS shift() unshift()</h5><p>这一组也放在一起讲。</p><p>pop() 和 push() 是在数组的末尾进行添加、删除元素的操作。</p><p>而shift() 和 unshift() 是在数组的头部进行添加、删除元素的操作。</p><p>其余的细节两组都一样，所以只以 pop() 和 push() 为例讲一讲。</p><p>pop() 方法用于删除数组的最后一个元素并返回删除的元素。会改变数组的长度</p><p>push() 方法用于在数组的末尾添加一个元素或多个元素，并返回数组的新长度。会改变数组的长度<br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// array.push(item1, item2, ..., itemX)</div><div class="line"></div><div class="line">var Array1 = [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;];</div><div class="line">Array1.push(&quot;ee&quot;,&quot;ff&quot;,&quot;gg&quot;);</div><div class="line">console.log(Array1);</div><div class="line"></div><div class="line">// 控制台输出[&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;,&quot;ee&quot;,&quot;ff&quot;,&quot;gg&quot;]</div><div class="line"></div><div class="line">//array.pop()</div><div class="line"></div><div class="line">var Array2 = [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;];</div><div class="line">var a = Array2.pop();</div><div class="line">console.log(a);  // 控制台输出 &quot;dd&quot;</div><div class="line">console.log(Array2);  // 控制台输出[&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;]</div></pre></td></tr></table></figure></p><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><p>顾名思义，filter() 算是一个过滤的方法，可以把源数组中符合条件的数据都放到一个新的数组中返回。<br>对于空数组不会执行，这个方法也不会改变源数组。<br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 标准形式如下，各个参数的意义如上面 every() 和 some() 方法</div><div class="line">// array.filter(function(currentValue,index,arr), thisValue)</div><div class="line"></div><div class="line">var Array1 = [32, 33, 16, 40];</div><div class="line">console.log(Array1.filter(function(ele)&#123;</div><div class="line">   return ele &gt;= 30;</div><div class="line">&#125;));</div><div class="line"></div><div class="line">// 输出结果为: [32,33,40]</div></pre></td></tr></table></figure></p><h5 id="sort-VS-reverse"><a href="#sort-VS-reverse" class="headerlink" title="sort() VS reverse()"></a>sort() VS reverse()</h5><p>这两个方法都是对数组进行排序的方法，所以也放在一组讲。</p><p>reverse() 比较简单，是将原来的数组逆序，就不多说了。</p><p>而 sort() 可以按照多种方式排序，又稍微有点复杂，直接贴一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="external">MDN关于这个方法的文档</a> 吧，讲的更清楚一些</p><h5 id="find-VS-findIndex"><a href="#find-VS-findIndex" class="headerlink" title="find() VS findIndex()"></a>find() VS findIndex()</h5><p>这两个都是查找元素操作。</p><p>find()返回的是满足条件（函数提供）的第一个元素，没有符合的返回 undefined。</p><p>而findIndex()返回的是满足条件（函数提供）的第一个元素的位置，没有符合的返回 -1。<br>对于空数组，它们都不会执行，这两个方法也不会改变数组的原始值。</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 标准形式如下，各个参数的意义如上面 every() 和 some() 方法</div><div class="line">// array.find(function(currentValue, index, arr),thisValue)</div><div class="line">// array.findIndex(function(currentValue, index, arr), thisValue)</div><div class="line"></div><div class="line">var Array1 = [3, 19, 18, 20]; </div><div class="line">function condition(ele) &#123;</div><div class="line">    return ele &gt;= 18;</div><div class="line">&#125;</div><div class="line">console.log(Array1.find(condition));</div><div class="line">// 控制台输出19</div><div class="line"></div><div class="line">console.log(Array1.findIndex(condition));</div><div class="line">// 控制台输出1</div></pre></td></tr></table></figure></p><h5 id="indexOf-VS-lastIndexOf"><a href="#indexOf-VS-lastIndexOf" class="headerlink" title="indexOf() VS lastIndexOf()"></a>indexOf() VS lastIndexOf()</h5><p>这两个方法也类似，一个是查找某元素第一次出现在数组中的位置，另一个是查找某元素最后一次出现在数组中的位置。这个不同也意味着 indexOf() 查找的时候是从数组头开始查找，而 lastIndexOf() 查找的时候是从数组尾开始查找。<br>如果没有符合的元素存在，则两者都返回 -1。</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// array.indexOf(查找的元素,?开始查找的位置。默认是数组起始位置)</div><div class="line"></div><div class="line">// array.lastIndexOf(查找的元素,?开始查找的位置。默认是数组的终止位置，一旦指定了这个值，相当于把数组截断从中间向前寻找元素最后一个出现的位置了)</div><div class="line"></div><div class="line">var Array1 = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;, &quot;Banana&quot;, &quot;Orange&quot;, &quot;Orange&quot;, &quot;Apple&quot;];</div><div class="line">console.log(Array1.lastIndexOf(&quot;Apple&quot;, 4));</div><div class="line"></div><div class="line">// 以最难的一个情况为例，控制台输出的是2，即从 Array1[4]向前查找，&quot;Apple&quot;最后出现的位置</div></pre></td></tr></table></figure></p><h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h5><p>slice用于从数组中截取需要的部分，并以新的对象返回，不会改变源数组。一般是对字符串处理的比较多。</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// array.slice(?start, ?end)</div><div class="line">// start 或 end 如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</div><div class="line">// 注意选取区间的变化，有以下三种情况</div><div class="line"></div><div class="line">arr.slice();</div><div class="line">// [0, end]</div><div class="line"></div><div class="line">arr.slice(begin);</div><div class="line">// [begin, end]</div><div class="line"></div><div class="line">arr.slice(begin, end);</div><div class="line">// [begin, end)</div><div class="line"></div><div class="line">var Array1 = [&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;];</div><div class="line">var Array2 = Array1.slice(-3,-1);</div><div class="line"></div><div class="line">// Array2 = [&quot;cc&quot;, &quot;dd&quot;]</div></pre></td></tr></table></figure></p><p>嗯，写的有点多，怕影响阅读体验。<br>其他还有一些平时用的频率没那么高的方法，下篇再写。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客搭建</title>
      <link href="/posts/10470/"/>
      <url>/posts/10470/</url>
      
        <content type="html"><![CDATA[<p>我的博客是通过 Hexo + GitHub Pages 搭建的，如果你也想搭建自己的专属博客，也有其他的选择，比如 WordPress 等，下面来讲讲我的博客搭建的过程。</p><h4 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h4><ul><li>GitHub 帐号一个</li><li>node、npm、git 环境</li><li>可能需要梯子（或配置 npm 镜像）</li><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo中文文档</a></li></ul><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>通过 npm 来全局安装 Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure><p>如果总是出错，就用梯子试试，因为有些依赖包可能在墙外。</p><p>安装好之后就可以全局使用 Hexo 命令了。</p><h4 id="用-Hexo-生成博客模版"><a href="#用-Hexo-生成博客模版" class="headerlink" title="用 Hexo 生成博客模版"></a>用 Hexo 生成博客模版</h4><p>在自己需要的地方新建一个文件夹，比如 MyBlog。</p><p>然后进入 MyBlog 文件夹，在该路径下启动命令行工具，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure><p>Hexo 会帮助你建立一个初始的博客模版，并且自动下载依赖包。</p><p>同上，如果依赖包总是出错安不上，建议爬梯试试。</p><p>图为正在初始化和安装依赖包</p><p><img src="http://image.tubbodetang.site/blog_build_1.png" alt=""></p><p>片刻后依赖包安装完成</p><p><img src="http://image.tubbodetang.site/blog_build_2.png" alt=""></p><p>至此，最初始的低级博客配置已经 OK 了，我们甚至可以在当前目录运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure><p>然后打开浏览器，访问 <code>localhost:4000</code> 就可以看到我们的初始页面了。</p><p><img src="http://image.tubbodetang.site/blog_build_3.png" alt=""></p><p>这就是 Hexo 初始化博客的样子，如果你不嫌弃，其实也可以直接用这个作为博客的样子哦。</p><p>嗯……不过多少还是有点丑，后面可以再慢慢优化……</p><h4 id="熟悉-Hexo-命令"><a href="#熟悉-Hexo-命令" class="headerlink" title="熟悉 Hexo 命令"></a>熟悉 Hexo 命令</h4><p>上面我们用到了 <code>hexo init</code> <code>hexo server</code> ，这些其实都是 Hexo 的命令，熟悉这些命令是用好 Hexo 的必备条件，可以去 Hexo 的官网查看各个命令的用法，我这里只说几个比较常用的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">hexo clean     清除静态文件生成后的缓存，更新博客样式之后如果看不到效果就是有缓存，用这个命令来清理。</div><div class="line">hexo generate  生成博客要发布的静态文件</div><div class="line">hexo deploy    发布博客</div><div class="line"></div><div class="line">hexo <span class="built_in">help</span>      查看 Hexo 命令的使用帮助，会列出所有的 Hexo 命令及用法</div><div class="line">hexo init      这个我们之前用过，就是初始化一个 Hexo 文件夹</div><div class="line">hexo new       新建一个文章，（用的不多，我都直接文件夹里新建，或者复制粘贴）</div><div class="line">hexo publish   把草稿从草稿文件夹移到待发布的文件夹中（用的不多，我都直接手动拖过去）</div><div class="line">hexo server    这个刚刚也用过，开启本地服务器，可以作为发布前的调试和查看确认</div></pre></td></tr></table></figure><p>也可以用简写，比如最常用的两个 generate 和 deploy 可以写成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure><h4 id="同步推送到-GitHub-并利用-Github-Pages-发布博客"><a href="#同步推送到-GitHub-并利用-Github-Pages-发布博客" class="headerlink" title="同步推送到 GitHub 并利用 Github Pages 发布博客"></a>同步推送到 GitHub 并利用 Github Pages 发布博客</h4><p>之前我们只是在本地建好了我们的博客，也可以在本地服务器上看到我们的博客，那么接下来我们就要利用 GitHub 的 Pages 功能来让我们的博客人人能访问了。</p><ol><li><p>在 GitHub 上创建名为 yourname.github.io 的项目。（以个人账户为名的 Pages 服务只能建立一个）</p></li><li><p>安装 Hexo 的 git 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></li><li><p>配置博客的 deploy 设置：</p><p>在博客根目录下的 <code>_config.yml</code> 文件中，修改 deploy 配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> </div><div class="line"><span class="attr">      github:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure></li><li><p>生成、发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure></li><li><p>开启 Github Pages 服务发布博客</p><p>在项目的 Settings 中找到下面的设置，然后选择 master 分支即可开启 Pages 服务</p><p><img src="http://image.tubbodetang.site/blog_build_5.png" alt=""></p></li><li><p>接下来浏览器访问 yourname.github.io ,就可以看到发布在互联网上的博客了。</p></li></ol><p>到此，以后我们每一次修改博客，发布文章，都只需要执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure><p>即可看到 GitHub 博客同步更新。</p><h4 id="添加样式主题"><a href="#添加样式主题" class="headerlink" title="添加样式主题"></a>添加样式主题</h4><p>但是现在我们的博客样式还有点太丑，所以我们还要美化一下它。</p><p>好在，Hexo 提供了开源样式库，都是大家制作分享的，我们自己也可以制作，但暂时没有那个时间，所以目前可以去 <a href="https://hexo.io/themes/" target="_blank" rel="external">样式中心</a> 选择一个自己喜欢的样式，直接套用就可以了。</p><p>套用的方法是：</p><ol><li><p>先把别人的主题文件去 GitHub 上克隆或者下载到 <code>themes</code> 文件夹里</p></li><li><p>配置博客根目录下的 <code>_config.yml</code> 文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line"><span class="attr">theme:</span> <span class="string">your-theme-name</span></div></pre></td></tr></table></figure><p>这里的 <code>your-theme-name</code> 和 <code>themes</code> 文件夹中的主题文件名字保持一致即可。</p></li><li><p>修改主题配置在主题文件中的 <code>_config.yml</code> 文件修改</p></li></ol><p>不过别人的样式终究有的地方不能符合自己的要求，多少需要自己修改下，但是这个比较需要代码知识，所以有空再单开文章一个写写我折腾的过程吧。</p><p>刚搭建的博客，先挑一个自己喜欢的、差不多的样式用上，赶紧开始写文章才是正道。</p><h4 id="发布第一篇文章"><a href="#发布第一篇文章" class="headerlink" title="发布第一篇文章"></a>发布第一篇文章</h4><p>发布文章很简单，你可以用上面提到的命令来创建并发布，也可以直接在 <code>source/_post</code> 文件夹下新建一个 Markdown 文件，在里面按照格式写好文章。</p><p>然后 <code>hexo g</code> <code>hexo d</code> 生成发布就可以了。</p><p>本文完。</p><p>————————————</p><p>接下来就是漫漫的写博客和折腾博客之路了，一起见证。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终于开始写博客了</title>
      <link href="/posts/60785/"/>
      <url>/posts/60785/</url>
      
        <content type="html"><![CDATA[<h2 id="也不知在黑暗里沉睡了多久"><a href="#也不知在黑暗里沉睡了多久" class="headerlink" title="也不知在黑暗里沉睡了多久"></a>也不知在黑暗里沉睡了多久</h2><p>说起来，真的非常非常久都没有写过东西了，除了每次过年的时候觉得自己必须得写点什么而诞生的年终总结。近些年连微博这种一篇只要140个字符的短消息我都没有怎么发表过。</p><p>并不是没有话说，而是要说的话太多，不知从何说起。</p><p>从前的时候，说自己的感受，是渴望自己被听到，被了解，而现在，知道自己终将不被人了解，那么我的感受又有什么意义呢，哪怕这感受只是写给自己，聊以自慰。</p><p>但是我终究不是没有话说，没说出口的话越攒越多，怎么可能让一个话痨停止讲话，大概他会疯掉。<br>于是，我又开始写作了，换了一个方式，换了一个地点，换了一个目的。</p><h2 id="生活不止眼前的苟且"><a href="#生活不止眼前的苟且" class="headerlink" title="生活不止眼前的苟且"></a>生活不止眼前的苟且</h2><p>工作已经两年多了，好吧其实我现在是一枚前端狗。平时工作忙的时候可以说是非常忙了，但也不是每天都很忙，还是有很多时间是花在查资料和自我提升上。写了很多笔记片段，也添加了很多的收藏夹……</p><p>两年中，看过无数个人的技术博客，也很多次蠢蠢欲动地想要开始写自己的“技术”博客。但是毕竟技术博客和自说自话地写个人心情记录不一样，我不知道从何开始，也不知道自己写的东西是否能令自己满意，更不知道我写的东西是否会给其他人带来那么一点点的帮助，还自觉自己肚里空空，要写出那种对自己和对别人都有意义的文章实在是太难了，所以这件事就一直搁置到了今天……</p><p>如今两年都过去了，这两年不管是我遇到的坑还是我趟过的沟，甚至战胜的问题，我都没有通过博客来记录，不得不说是非常遗憾的了，对于我的拖延，我真的找了太多借口：）</p><p>好像是去年冬天吧，忘记了从什么渠道关注了Android界的大牛之一stormzhang，期间断断续续的关注着，一直到现在我可以说我可能已经变成了他的脑残粉，每推必看。虽然我目前的工作并没有涉及到太多的移动端内容，但他打动我的原因，主要有以下两个：</p><ol><li>他做事情非常、非常认真的态度</li><li>他分享的那些读起来简单清晰易懂，内容也很有价值的文章<br>其中第一点也是最最重要的一点。<br>他本人也经常介绍一些自己写作的经验，以及自己为什么坚持写作的原因，我看过之后觉得很受益，其实不需要担心那么多，只要开始做，就好了。</li></ol><p>所以我开始做了。</p><p>（这里谢谢stormzhang的分享和激励）</p><h2 id="天亮走到天黑-从不觉疲惫"><a href="#天亮走到天黑-从不觉疲惫" class="headerlink" title="天亮走到天黑 从不觉疲惫"></a>天亮走到天黑 从不觉疲惫</h2><p>下面就说说对自己的期许吧，算是对自己的承诺，希望自己能一直坚持下去，越走越远，回头看的时候还能自检。</p><p>作为一个程序员，我要坚持对自己的严格要求，所以博客没有直接在某站注册然后开始写，而是通过 github + Hexo 搭建的，没别的原因，因为觉得逼格不够啊：）<br>当然了，说到逼格，现在还差一个属于我的域名，然而天天吃土，权衡了一下还是放弃了，希望有一天通过自己的努力可以给我这个装满东西的博客一个高大上的名字。</p><p>以后希望能够在这里记录自己平时工作、学习中遇到的问题，解决问题的过程记录。<br>可能主要会包括以下几个方面，也是必须包括这几个方面，为了防止自己偷懒，做个记录：</p><ul><li>用户体验、UI方面的知识</li><li>CSS、HTML方面的知识</li><li>各种前端框架、开发工具方面的知识</li><li>编程的一些基本功，比如算法、数据结构等一些小知识</li><li>自学Adobe各种软件应用的过程</li></ul><p>除了上边说的这些，作为一个个人爱好丰富的人，可能还会写一些其他的东西，比如：</p><ul><li>平时听歌的感想</li><li>有空时候的涂涂画画</li><li>个人的回忆、琐事、经历等</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>艾玛，就说我其实是个话痨压抑太久，一不小心就写了这么多。<br>总之，记得自己从哪来，往哪去，坚持，努力，是这个博客存在的所有意义。<br>就是干！（脑残粉抄袭stormzhang口头禅哈哈）</p>]]></content>
      
      
      <categories>
          
          <category> 个人经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 经历 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
